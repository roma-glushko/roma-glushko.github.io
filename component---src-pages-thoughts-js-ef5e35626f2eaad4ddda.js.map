{"version":3,"file":"component---src-pages-thoughts-js-ef5e35626f2eaad4ddda.js","mappings":"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","sources":["webpack://romaglushko.com/./src/components/theme/breadcrumbs-rich-snippet.js","webpack://romaglushko.com/./src/components/theme/footer.js","webpack://romaglushko.com/./src/components/theme/logo.js","webpack://romaglushko.com/./src/components/theme/theme-switcher.js","webpack://romaglushko.com/./src/components/thoughts/thought-author.js","webpack://romaglushko.com/./src/components/thoughts/thought-teaser.js","webpack://romaglushko.com/./src/pages/thoughts.js"],"sourcesContent":["import React from \"react\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst BreadcrumbsRichSnippet = ({ crumbs = [] }) => {\n  const {\n    site: {\n      siteMetadata: { siteUrl },\n    },\n  } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  let crumbItems = [\n    {\n      \"@type\": \"ListItem\",\n      position: 1,\n      name: \"Home\",\n      item: `${siteUrl}/`,\n    },\n  ]\n\n  crumbs.forEach((crumbItem, idx) => {\n    const [[path, title]] = Object.entries(crumbItem)\n\n    crumbItems.push({\n      \"@type\": \"ListItem\",\n      position: idx + 2, // adjustment for the first home item which is in 1 position\n      name: title,\n      item: `${siteUrl}${path}`,\n    })\n  })\n\n  const schemaJSONLD = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    itemListElement: crumbItems,\n  }\n\n  return (\n    <Helmet>\n      <script type=\"application/ld+json\">{JSON.stringify(schemaJSONLD)}</script>\n    </Helmet>\n  )\n}\n\nexport default BreadcrumbsRichSnippet\n","import React from \"react\"\nimport SocialLinks from \"../homepage/social-links\"\n\nimport \"./footer.css\"\n\nconst Footer = () => {\n  return (\n    <footer>\n      <div className=\"footer-wrapper\">\n        <SocialLinks iconSize=\"2x\" />\n        <div className=\"copyright\">\n          Roman Glushko © 1996 - {new Date().getFullYear()} <br />\n          <a\n            rel=\"license\"\n            href=\"https://creativecommons.org/licenses/by/4.0/\"\n            title=\"Content is published under CC BY 4.0 license\"\n          >\n            CC BY 4.0\n          </a>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\n\nconst Logo = () => {\n  // TODO: parametrize and unify this component with Avatar one\n  const { placeholderImage } = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"homepage/photo3.jpg\" }) {\n        childImageSharp {\n          gatsbyImageData(layout: CONSTRAINED, width: 150)\n        }\n      }\n    }\n  `)\n\n  return (\n    <GatsbyImage\n      className=\"logo-img\"\n      image={placeholderImage.childImageSharp.gatsbyImageData}\n      alt={`Roman Glushko`}\n    />\n  )\n}\n\nexport default Logo\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React, { PureComponent } from \"react\"\nimport { ThemeToggler } from \"gatsby-plugin-dark-mode\"\n\nimport \"./theme-switcher.css\"\n\nexport default class ThemeSwitcher extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      checked: false,\n    }\n  }\n\n  handleClick = (e) => {\n    const { checked, toggleTheme } = this.state\n    const newState = !checked\n\n    this.setState({\n      checked: newState,\n    })\n\n    toggleTheme(newState ? \"dark\" : \"light\")\n  }\n\n  render = () => {\n    return (\n      <ThemeToggler>\n        {({ theme, toggleTheme }) => {\n          this.setState({\n            checked: theme === \"dark\",\n            toggleTheme: toggleTheme,\n          })\n\n          const classNames =\n            \"theme-switcher-toggler\" +\n            (this.state.checked ? \" theme-switcher-toggler--checked\" : \"\")\n\n          return (\n            <div className={classNames} onClick={this.handleClick}>\n              <div className=\"theme-switcher-track\"></div>\n              <div className=\"theme-switcher-thumb\"></div>\n\n              <input\n                className=\"theme-switcher-input\"\n                type=\"checkbox\"\n                checked={theme === \"dark\"}\n                readOnly={true}\n                aria-label=\"Switch between Dark and Light mode\"\n              />\n            </div>\n          )\n        }}\n      </ThemeToggler>\n    )\n  }\n}\n","import React from \"react\"\nimport Logo from \"../theme/logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = () => {\n  return (\n    <div className=\"thought-author-wrapper\">\n      <div className=\"logo\">\n        <div className=\"avatar\">\n          <Logo />\n        </div>\n      </div>\n      <div className=\"name\">• Roman Glushko •</div>\n      <p className=\"thought-section-descr\">\n        My thoughts, pieces of advice and life experience <br />\n        that will help you to <strong>overcome</strong> your life struggles\n      </p>\n    </div>\n  )\n}\n\nexport default ThoughtAuthor\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nimport \"./thought-teaser.css\"\n\nconst ThoughtTeaser = (props) => {\n  const {\n    title,\n    url,\n    timeToRead,\n    publishedHumanDate,\n    publishedFullDate,\n    excerpt,\n    cover,\n  } = props\n\n  return (\n    <article className=\"thought-item\">\n      <h2>\n        <Link to={url}>{title}</Link>\n      </h2>\n      <div className=\"thought-details\">\n        <time className=\"thought-createdat\" dateTime={publishedFullDate}>\n          {publishedHumanDate}\n        </time>\n        <span> • </span>\n        <span className=\"thought-time2read\">{timeToRead}{timeToRead > 1 ? \"mins\": \"min\"} read</span>\n      </div>\n      <Link to={url}>\n        <div className=\"cover-filter\">\n          <GatsbyImage className=\"cover\" image={cover} alt={title} />\n        </div>\n      </Link>\n      <p className=\"thought-digest\">{excerpt}</p>\n    </article>\n  )\n}\n\nThoughtTeaser.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  publishedFullDate: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n}\n\nexport default ThoughtTeaser\n","import React, { Component } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/theme/layout\"\nimport Seo from \"../components/seo\"\nimport MainNavigation from \"../components/theme/main-navigation\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\nimport ThoughtTeaser from \"../components/thoughts/thought-teaser\"\nimport BreadcrumbsRichSnippet from \"../components/theme/breadcrumbs-rich-snippet\"\nimport Footer from \"../components/theme/footer\"\n\nimport \"./thoughts.css\"\n\nclass ThoughtListPage extends Component {\n  render() {\n    const {\n      data: {\n        socialImage,\n        allMarkdownRemark: { edges },\n      },\n    } = this.props\n\n    return (\n      <Layout>\n        <Seo\n          title=\"Thoughts\"\n          pagePath=\"/thoughts/\"\n          className=\"thoughts-list-page\"\n          description=\"Thoughts and experience that will help you to go through your life in the very best way\"\n          imagePath={socialImage.publicURL}\n          keywords={[\n            \"thoughts\",\n            \"opinion\",\n            \"life exploring\",\n            \"psychology\",\n            \"roman glushko thoughts\",\n            \"roman hlushko thoughts\",\n            \"life\",\n            \"people\",\n            \"management\",\n          ]}\n          meta={[]}\n        />\n        <div className=\"thoughts-wrapper\">\n          <h1 className=\"thoughts-title\">Thoughts</h1>\n          <aside className=\"thought-sidebar\">\n            <ThoughtAuthor />\n            <MainNavigation space={\"thoughts\"} />\n            <div className=\"theme-switcher\">\n              <ThemeSwitcher />\n            </div>\n          </aside>\n          <main className=\"thoughts-list\">\n            {edges.map((thought) => (\n              <ThoughtTeaser\n                key={thought.node.id}\n                title={thought.node.frontmatter.title}\n                url={thought.node.frontmatter.path}\n                timeToRead={thought.node.timeToRead}\n                publishedHumanDate={thought.node.frontmatter.humanDate}\n                publishedFullDate={thought.node.frontmatter.fullDate}\n                excerpt={thought.node.excerpt}\n                cover={thought.node.frontmatter.cover.childImageSharp.gatsbyImageData}\n              />\n            ))}\n          </main>\n          <div className=\"clearfix\" />\n        </div>\n        <Footer />\n        <BreadcrumbsRichSnippet crumbs={[{ \"/thoughts/\": \"Thoughts\" }]} />\n      </Layout>\n    )\n  }\n}\n\nexport default ThoughtListPage\n\nexport const pageQuery = graphql`\n  query ThoughtListQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: {\n        fileAbsolutePath: { regex: \"/(thoughts)/\" }\n        frontmatter: { published: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 100)\n          timeToRead\n          frontmatter {\n            humanDate: date(formatString: \"MMM D, YYYY\")\n            fullDate: date(formatString: \"YYYY-MM-DD\")\n            path\n            title\n            cover {\n              childImageSharp {\n                gatsbyImageData(\n                    layout: CONSTRAINED, \n                    width: 690,\n                    placeholder: BLURRED\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n    socialImage: file(relativePath: { eq: \"blog/roman-glushko-thoughts.jpg\" }) {\n      publicURL\n    }\n  }\n`\n"],"names":["crumbs","siteUrl","useStaticQuery","site","siteMetadata","crumbItems","position","name","item","forEach","crumbItem","idx","Object","entries","path","title","push","schemaJSONLD","itemListElement","type","JSON","stringify","className","iconSize","Date","getFullYear","rel","href","placeholderImage","G","image","childImageSharp","gatsbyImageData","alt","ThemeSwitcher","props","handleClick","e","state","checked","toggleTheme","newState","setState","render","theme","classNames","onClick","readOnly","PureComponent","url","timeToRead","publishedHumanDate","publishedFullDate","excerpt","cover","Link","to","dateTime","ThoughtListPage","this","data","socialImage","edges","allMarkdownRemark","pagePath","description","imagePath","publicURL","keywords","meta","space","map","thought","key","node","id","frontmatter","humanDate","fullDate","Component"],"sourceRoot":""}