{"version":3,"file":"component---src-pages-thoughts-js-b62765d8a77685ea6d79.js","mappings":"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","sources":["webpack://romaglushko.com/./src/components/footer.tsx","webpack://romaglushko.com/./src/components/seo/breadcrumbs-snippet.tsx","webpack://romaglushko.com/./src/components/theme/logo.tsx","webpack://romaglushko.com/./src/components/theme/theme-switcher.tsx","webpack://romaglushko.com/./src/components/thoughts/thought-author.tsx","webpack://romaglushko.com/./src/components/thoughts/thought-teaser.tsx","webpack://romaglushko.com/./src/pages/thoughts.js"],"sourcesContent":["import * as React from \"react\"\nimport SocialLinks from \"./homepage/SocialLinks\"\n\nimport \"./Footer.css\"\n\nconst Footer = (): JSX.Element => {\n  const currentDate: Date = new Date()\n\n  return (\n    <footer data-nosnippet=\"\">\n      <div className=\"footer-wrapper\">\n        <SocialLinks showPatreon={true} iconSize={\"2x\"} />\n        <div className=\"copyright\">\n          Roman Glushko © 1996 - {currentDate.getFullYear()} <br />\n          <a\n            rel=\"license\"\n            href=\"https://creativecommons.org/licenses/by/4.0/\"\n            title=\"Content is published under CC BY 4.0 license\"\n          >\n            CC BY 4.0\n          </a>\n        </div>\n        <div className={`pgp`}>\n          <a href={`https://keybase.io/roman_hlushko`}>AB49 B91C C3E5 8E73</a>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import * as React from \"react\"\nimport Helmet from \"react-helmet\"\n\nimport { useWebsiteMetadata } from \"../../hooks/website-metadata\"\n\ninterface Breadcrumb {\n  \"@type\": string\n  position: number\n  name: string\n  item: string\n}\n\ntype Crumb = Record<string, string>\n\ninterface Props {\n  crumbs: Crumb[]\n}\n\nconst BreadcrumbsSnippet = ({ crumbs = [] }: Props): JSX.Element => {\n  const { siteUrl } = useWebsiteMetadata()\n\n  const crumbItems: Breadcrumb[] = [\n    {\n      \"@type\": \"ListItem\",\n      position: 1,\n      name: \"Home\",\n      item: `${siteUrl}/`,\n    },\n  ]\n\n  crumbs.forEach((crumbItem: Crumb, idx: number) => {\n    const [[path, title]] = Object.entries(crumbItem)\n\n    crumbItems.push({\n      \"@type\": \"ListItem\",\n      position: idx + 2, // adjustment for the first home item which is in 1 position\n      name: title,\n      item: `${siteUrl}${path}`,\n    })\n  })\n\n  const schemaJSONLD = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    itemListElement: crumbItems,\n  }\n\n  return (\n    <Helmet>\n      <script type=\"application/ld+json\">{JSON.stringify(schemaJSONLD)}</script>\n    </Helmet>\n  )\n}\n\nexport default BreadcrumbsSnippet\n","import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Logo = (): JSX.Element => {\n  // TODO: parametrize and unify this component with Avatar one\n  return (\n    <StaticImage\n      className=\"logo-img\"\n      src={`../../images/homepage/photo3.jpg`}\n      width={150}\n      quality={80}\n      formats={[\"auto\", \"webp\", \"avif\"]}\n      alt={`Roman Glushko`}\n    />\n  )\n}\n\nexport default Logo\n","import * as React from \"react\"\nimport { useState } from \"react\"\n\nimport { ThemeToggler } from \"gatsby-plugin-dark-mode\"\n\nimport \"./theme-switcher.css\"\n\nexport enum Themes {\n  DARK = `dark`,\n  LIGHT = `light`,\n}\n\ninterface ThemeProps {\n  theme: string\n  toggleTheme: (themeName: string) => void\n}\n\nconst ThemeSwitcher = (): JSX.Element => {\n  const [darkMode, setDarkMode] = useState(false)\n\n  return (\n    <ThemeToggler>\n      {({ theme, toggleTheme }: ThemeProps): JSX.Element => {\n        setDarkMode(theme === Themes.DARK)\n\n        const switchTheme = (): void => {\n          const newState = !darkMode\n\n          setDarkMode(newState)\n          toggleTheme(newState ? Themes.DARK : Themes.LIGHT)\n        }\n\n        const classNames: string =\n          \"theme-switcher-toggler\" +\n          (darkMode ? \" theme-switcher-toggler--checked\" : \"\")\n\n        return (\n          <div className={classNames} onClick={switchTheme}>\n            <div className=\"theme-switcher-track\" />\n            <div className=\"theme-switcher-thumb\" />\n\n            <input\n              className=\"theme-switcher-input\"\n              type=\"checkbox\"\n              checked={theme === Themes.DARK}\n              readOnly={true}\n              aria-label=\"Switch between Dark and Light modes\"\n            />\n          </div>\n        )\n      }}\n    </ThemeToggler>\n  )\n}\n\nexport default ThemeSwitcher\n","import * as React from \"react\"\nimport Logo from \"../theme/logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = (): JSX.Element => {\n  return (\n    <div className=\"thought-author-wrapper\">\n      <div className=\"logo\">\n        <div className=\"avatar\">\n          <Logo />\n        </div>\n      </div>\n      <div className=\"name\">• Roman Glushko •</div>\n      <p className=\"thought-section-descr\">\n        My thoughts, pieces of advice and life experience <br />\n        that will help you to <strong>overcome</strong> your life struggles\n      </p>\n    </div>\n  )\n}\n\nexport default ThoughtAuthor\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\n\nimport \"./thought-teaser.css\"\n\ninterface Props {\n  title: string\n  url: string\n  timeToRead: number\n  publishedHumanDate: string\n  publishedFullDate: string\n  excerpt: string\n  cover: IGatsbyImageData\n}\n\nconst ThoughtTeaser = (props: Props) => {\n  const {\n    title,\n    url,\n    timeToRead,\n    publishedHumanDate,\n    publishedFullDate,\n    excerpt,\n    cover,\n  } = props\n\n  return (\n    <article className=\"thought-item\">\n      <h2>\n        <Link to={url}>{title}</Link>\n      </h2>\n      <div className=\"thought-details\">\n        <time className=\"thought-createdat\" dateTime={publishedFullDate}>\n          {publishedHumanDate}\n        </time>\n        <span> • </span>\n        <span className=\"thought-time2read\">\n          {timeToRead}\n          {timeToRead > 1 ? \"mins\" : \"min\"} read\n        </span>\n      </div>\n      <Link to={url}>\n        <div className=\"cover-filter\">\n          <GatsbyImage className=\"cover\" image={cover} alt={title} />\n        </div>\n      </Link>\n      <p className=\"thought-digest\">{excerpt}</p>\n    </article>\n  )\n}\n\nThoughtTeaser.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  publishedFullDate: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n}\n\nexport default ThoughtTeaser\n","import React, { Component } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/theme/layout\"\nimport Seo from \"../components/seo/seo\"\nimport MainNavigation from \"../components/main-navigation\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\nimport ThoughtTeaser from \"../components/thoughts/thought-teaser\"\nimport BreadcrumbsSnippet from \"../components/seo/breadcrumbs-snippet\"\nimport Footer from \"../components/footer\"\n\nimport \"./thoughts.css\"\n\nclass ThoughtListPage extends Component {\n  render() {\n    const {\n      data: {\n        socialImage,\n        allMarkdownRemark: { edges },\n      },\n    } = this.props\n\n    return (\n      <Layout>\n        <Seo\n          title=\"Thoughts\"\n          pagePath=\"/thoughts/\"\n          className=\"thoughts-list-page\"\n          description=\"Thoughts and experience that will help you to go through your life in the very best way\"\n          imagePath={socialImage.publicURL}\n          keywords={[\n            \"thoughts\",\n            \"opinion\",\n            \"life exploring\",\n            \"psychology\",\n            \"roman glushko thoughts\",\n            \"roman hlushko thoughts\",\n            \"life\",\n            \"people\",\n            \"management\",\n          ]}\n          meta={[]}\n        />\n        <div className=\"thoughts-wrapper\">\n          <h1 className=\"thoughts-title\">Thoughts</h1>\n          <aside className=\"thought-sidebar\">\n            <ThoughtAuthor />\n            <MainNavigation space={\"thoughts\"} />\n            <div className=\"theme-switcher\">\n              <ThemeSwitcher />\n            </div>\n          </aside>\n          <main className=\"thoughts-list\">\n            {edges.map((thought) => (\n              <ThoughtTeaser\n                key={thought.node.id}\n                title={thought.node.frontmatter.title}\n                url={thought.node.frontmatter.path}\n                timeToRead={thought.node.timeToRead}\n                publishedHumanDate={thought.node.frontmatter.humanDate}\n                publishedFullDate={thought.node.frontmatter.fullDate}\n                excerpt={thought.node.excerpt}\n                cover={\n                  thought.node.frontmatter.cover.childImageSharp.gatsbyImageData\n                }\n              />\n            ))}\n          </main>\n          <div className=\"clearfix\" />\n        </div>\n        <Footer />\n        <BreadcrumbsSnippet crumbs={[{ \"/thoughts/\": \"Thoughts\" }]} />\n      </Layout>\n    )\n  }\n}\n\nexport default ThoughtListPage\n\nexport const pageQuery = graphql`\n  query ThoughtListQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: {\n        fileAbsolutePath: { regex: \"/(thoughts)/\" }\n        frontmatter: { published: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 100)\n          timeToRead\n          frontmatter {\n            humanDate: date(formatString: \"MMM D, YYYY\")\n            fullDate: date(formatString: \"YYYY-MM-DD\")\n            path\n            title\n            cover {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 700\n                  placeholder: BLURRED\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n    socialImage: file(relativePath: { eq: \"blog/roman-glushko-thoughts.jpg\" }) {\n      publicURL\n    }\n  }\n`\n"],"names":["currentDate","Date","React","className","SocialLinks","showPatreon","iconSize","getFullYear","rel","href","title","crumbs","siteUrl","useWebsiteMetadata","crumbItems","position","name","item","forEach","crumbItem","idx","Object","entries","path","push","schemaJSONLD","itemListElement","Helmet","type","JSON","stringify","StaticImage","src","width","quality","formats","alt","Themes","useState","darkMode","setDarkMode","ThemeToggler","theme","toggleTheme","DARK","classNames","onClick","newState","LIGHT","checked","readOnly","Logo","props","url","timeToRead","publishedHumanDate","publishedFullDate","excerpt","cover","Link","to","dateTime","GatsbyImage","image","ThoughtListPage","render","this","data","socialImage","edges","allMarkdownRemark","pagePath","description","imagePath","publicURL","keywords","meta","space","map","thought","key","node","id","frontmatter","humanDate","fullDate","childImageSharp","gatsbyImageData","Component"],"sourceRoot":""}