{"version":3,"sources":["webpack:///./src/components/thoughts/logo.js","webpack:///./src/components/thoughts/thought-author.js","webpack:///./src/components/thoughts/thought.js","webpack:///./src/components/thoughts/thought-navigation.js","webpack:///./src/components/thoughts/thought-rich-snippet.js","webpack:///./src/templates/thoughtTemplate.js"],"names":["Logo","data","className","fluid","placeholderImage","childImageSharp","ThoughtAuthor","Thought","props","title","timeToRead","publishedDate","contentHtml","dangerouslySetInnerHTML","__html","ThoughtNavigation","next","frontmatter","nextTitle","nextUrl","path","prev","prevTitle","prevUrl","rel","to","ThoughtRichSnippet","datePublished","content","wordCount","keywords","schemaJSONLD","image","personImage","src","headline","dateCreated","dateModified","inLanguage","isFamilyFriendly","author","publisher","mainEntityOfPage","genre","articleSection","articleBody","wordcount","type","JSON","stringify","Template","markdownRemark","date","html","rawMarkdownBody","excerpt","words","pageContext","prevThought","nextThought","description","pageQuery"],"mappings":"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","file":"component---src-templates-thought-template-js-ec117dd5e3a7c6ab5aa2.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst Logo = () => {\n    const data = useStaticQuery(graphql `\n    query {\n      placeholderImage: file(relativePath: { eq: \"homepage/photo.jpeg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n    return <Img className=\"logo-img\" fluid = { data.placeholderImage.childImageSharp.fluid } />\n}\n\nexport default Logo","import React from \"react\";\nimport Logo from \"./logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = () => {\n  return (\n    <div className=\"thought-author-wrapper\">\n        <div className=\"logo\">\n            <div className=\"avatar\">\n                <Logo />\n            </div>\n        </div>\n        <div className=\"name\">• Roman Glushko •</div>\n        <p className=\"thought-section-descr\">Unpopular and totally wrong thoughts. <br/> Yeah, I know it. And that's <span>fine</span>.</p>\n    </div>\n  );\n};\n\nexport default ThoughtAuthor;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ThemeSwitcher from \"../theme/theme-switcher\"\n\nimport \"./thought.css\"\nimport \"./thought-content.css\"\n\nconst Thought = (props) => {\n\n    const {\n        title,\n        timeToRead,\n        publishedDate,\n        contentHtml,\n    } = props;\n\n    return (\n        <article className=\"thought-wrapper\">\n            <header>\n                <h1>{title}</h1>\n                <div className=\"thought-details\">\n                    <time className=\"thought-createdat\">{publishedDate}</time>\n                    <span> • </span>\n                    <span className=\"thought-time2read\">{timeToRead} min read</span>\n                    <div className=\"theme-switcher\">\n                        <ThemeSwitcher />\n                    </div>\n                </div>\n            </header>\n            <div className=\"thought-divider\" />\n            <div\n                className=\"thought-content\"\n                dangerouslySetInnerHTML={{ __html: contentHtml }}\n            />\n        </article>\n    );\n};\n\nThought.propTypes = {\n    title: PropTypes.string.isRequired,\n    timeToRead: PropTypes.number.isRequired,\n    publishedDate: PropTypes.string.isRequired,\n    contentHtml: PropTypes.string.isRequired,\n  };\n\nexport default Thought;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\";\n\nimport \"./thought-navigation.css\"\n\nconst ThoughtNavigation = props => {\n\n  const {\n    next: {\n      frontmatter: { title: nextTitle, path: nextUrl } = {}\n    } = {},\n    prev: {\n      frontmatter: { title: prevTitle, path: prevUrl } = {}\n    } = {}\n  } = props;\n\n  if (!nextUrl && !prevUrl) return null;\n\n  return (\n    <div className=\"thought-navigation-wrapper\">\n        <nav className=\"thought-navigation\">\n          <div className=\"nav-links\">\n          {nextUrl && (\n              <Link rel=\"next\" className=\"next-thought\" to={nextUrl}>\n                  {nextTitle} →\n              </Link>\n          )}\n          {prevUrl && (\n            <Link rel=\"prev\" className=\"prev-thought\" to={prevUrl}>\n                ← {prevTitle} \n            </Link>\n          )}\n            <Link className=\"all-thoughts\" to=\"/thoughts\">All Thoughts</Link>\n          </div>\n        </nav>\n    </div>\n  );\n};\n\nThoughtNavigation.propTypes = {\n  next: PropTypes.object,\n  prev: PropTypes.object,\n};\n\nexport default ThoughtNavigation;","import React from \"react\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst ThoughtRichSnippet = ({title, datePublished, content, wordCount, keywords}) => {\n  const { personImage } = useStaticQuery(\n    graphql`\n      query {\n        personImage: file(relativePath: { eq: \"homepage/photo.jpeg\" }) {\n          childImageSharp {\n            fluid(maxWidth: 300) {\n              src\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const schemaJSONLD = {\n    '@context': 'http://schema.org',\n    '@type': 'BlogPosting',\n    image: personImage.childImageSharp.fluid.src,\n    headline: title,\n    dateCreated: datePublished,\n    dateModified: datePublished,\n    datePublished,\n    inLanguage: \"en-US\",\n    isFamilyFriendly: \"true\",\n    author: {\n\t\t\t\"@type\": \"Person\",\n\t\t\t\"name\": \"Roman Glushko\",\n    },\n    publisher: {\n\t\t\t\"@type\": \"Person\",\n\t\t\t\"name\": \"Roman Glushko\",\n    },\n    mainEntityOfPage: \"true\",\n\t\tkeywords: keywords,\n\t\tgenre:[\"opinion\",\"thoughts\", \"life expirience\"],\n\t\tarticleSection: \"Thoughts\",\n    articleBody: content,\n    wordcount: wordCount\n  }\n\n  return (\n    <Helmet>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaJSONLD)}\n      </script>\n    </Helmet>\n  )\n}\n\nexport default ThoughtRichSnippet\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport Thought from \"../components/thoughts/thought\"\nimport ThoughtNavigation from \"../components/thoughts/thought-navigation\"\nimport Layout from \"../components/theme/layout\"\nimport SEO from \"../components/seo\"\n\nimport \"./thought-view.css\"\nimport ThoughtRichSnippet from \"../components/thoughts/thought-rich-snippet\"\n\nexport default function Template({\n  data: {markdownRemark: {frontmatter: {title, date, keywords}, html, rawMarkdownBody, timeToRead, excerpt, wordCount: {words}}},\n  pageContext: { prevThought, nextThought }\n}) {\n  return (\n    <Layout>\n      <SEO \n        title = {title + \" • Thoughts\"} \n        className=\"thought-view-page\"\n        description={excerpt}\n      />\n        <div className=\"thoughts-title\">\n          <Link to=\"/thoughts\">Thoughts</Link>\n        </div>\n        <main>\n          <Thought title={title} timeToRead={timeToRead} publishedDate={date} contentHtml={html} />\n        </main>\n        <aside className=\"thought-sidebar\">\n          <ThoughtAuthor />\n          <ThoughtNavigation prev={prevThought} next={nextThought} />\n        </aside>\n        <ThoughtRichSnippet \n          title={title}\n          datePublished={date}\n          content={rawMarkdownBody}\n          wordCount={words}\n          keywords={keywords}\n        />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      timeToRead\n      excerpt\n      rawMarkdownBody\n      wordCount {\n        words\n      }\n      frontmatter {\n        date(formatString: \"MMM D, YYYY\")\n        title\n        keywords\n      }\n    }\n  }\n`"],"sourceRoot":""}