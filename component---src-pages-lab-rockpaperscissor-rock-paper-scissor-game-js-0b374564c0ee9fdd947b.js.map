{"version":3,"sources":["webpack:///./src/pages/lab/rockpaperscissor/rock-paper-scissor-game.js"],"names":["RockPaperScissorGame","props","mountCameraStream","cameraElement","msHorizontalMirror","navigator","mediaDevices","getUserMedia","video","audio","then","stream","srcObject","setState","cameraStreamMounted","catch","error","console","log","onRoundStarted","isRoundStarted","roundCountdown","computerChoice","humanChoice","setTimeout","countDown","state","onRoundFinished","getHumanChoiceFrame","requestAnimationFrame","camera","current","makeComputerChoice","context","humanChoiceImage","getContext","translate","scale","drawImage","predictHumanChoice","videoFrame","scoreRound","Math","floor","random","choices","length","renderChoice","choiceIdx","React","createRef","humanScore","computerScore","componentDidMount","this","render","className","ref","playsInline","autoPlay","onClick","disabled","icon","faPlay","Component"],"mappings":"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","file":"component---src-pages-lab-rockpaperscissor-rock-paper-scissor-game-js-0b374564c0ee9fdd947b.js","sourcesContent":["import React from 'react'\nimport { Link } from \"gatsby\"\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay } from '@fortawesome/free-solid-svg-icons'\n\nimport './rock-paper-scissor-game.css'\n\nclass RockPaperScissorGame extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    \n    this.choices = [\n      '✊',\n      '✋',\n      '✌️',\n    ]\n\n    this.camera = React.createRef();\n    this.humanChoiceImage = React.createRef();\n\n    this.state = {\n      cameraStreamMounted: false,\n      humanScore: 0,\n      computerScore: 0,\n      isRoundStarted: false,\n      roundCountdown: 3,\n      computerChoice: -1,\n      humanChoice: -1,\n    }\n  }\n \n  componentDidMount() {\n    this.mountCameraStream(this.camera.current)\n  }\n\n  // mount camera video stream to video element\n  mountCameraStream = (cameraElement) => {\n    cameraElement.msHorizontalMirror = true;\n\n    if (!navigator.mediaDevices.getUserMedia) {\n      console.log('No camera?')\n      return\n    }\n\n    navigator.mediaDevices.getUserMedia({ video: true, audio: false })\n      .then((stream) => {\n        cameraElement.srcObject = stream;\n\n        this.setState({\n          cameraStreamMounted: true,\n        })\n      })\n      .catch((error) => {\n        console.log(\"Something went wrong: \" + error);\n      })\n  }\n\n  onRoundStarted = () => {\n    this.setState({\n      isRoundStarted: true,\n      roundCountdown: 3,\n      computerChoice: -1,\n      humanChoice: -1,\n    })\n    \n    const countDown = () => {\n      if (this.state.roundCountdown >= 1) {\n        this.setState({\n          roundCountdown: this.state.roundCountdown - 1,\n        })\n\n        setTimeout(countDown, 1000);\n        return\n      }\n\n      this.onRoundFinished()\n    }\n\n    setTimeout(countDown, 1000)\n  }\n\n  onRoundFinished = () => {\n    this.getHumanChoiceFrame()\n\n    requestAnimationFrame(() => {\n      this.getHumanChoiceFrame(this.camera.current).then(() => {});\n    });\n\n    this.setState({\n      computerChoice: this.makeComputerChoice(),\n      isRoundStarted: false,\n    })\n  }\n\n  getHumanChoiceFrame = (cameraElement) => {\n    const canvasElement = this.humanChoiceImage.current\n\n    const context = canvasElement.getContext('2d');\n\n    context.translate(300, 0);\n    context.scale(-1, 1);\n\n    context.drawImage(cameraElement, 0, 0, 300, 300);\n\n    return cameraElement\n  }\n\n  predictHumanChoice = (videoFrame) => {\n    \n  }\n\n  // identify winner of this pair\n  scoreRound = (humanChoice, computerChoice) => {\n    \n  }\n\n  // pick randomly one of 3 possible states\n  makeComputerChoice = () => {\n    return Math.floor(Math.random() * this.choices.length)\n  }\n\n  renderChoice = (choiceIdx) => {\n    if (choiceIdx === -1) {\n      return \"\"\n    }\n\n    return this.choices[choiceIdx]\n  }\n\n  render() {\n    const {\n      humanScore, \n      computerScore,\n      cameraStreamMounted, \n      isRoundStarted, \n      roundCountdown,\n      computerChoice,\n      humanChoice,\n    } = this.state\n\n    return (\n    <div className=\"game\">\n      <div className=\"game-item\">\n        <div className=\"player\">\n          <canvas className=\"human-choice-image\" ref={this.humanChoiceImage}></canvas>\n        </div>\n      </div>\n      <div className=\"game-item\">\n        <div className=\"title\">🧠 You</div>\n        <div className=\"player human\">\n          <video ref={this.camera} className=\"video-background\" playsInline={true} autoPlay={true}>\n            No Video\n          </video>\n          {humanChoice !== -1 ? <div className=\"choice\">{this.renderChoice(humanChoice)}</div> : \"\"}\n        </div>\n      </div>\n      <div className=\"game-item controls\">\n        <div className=\"score\">\n          {humanScore} : {computerScore}\n        </div>\n        { !isRoundStarted ?\n          <button className=\"play\" onClick={this.onRoundStarted} disabled={!cameraStreamMounted}>\n            <FontAwesomeIcon icon={faPlay} /> Play\n          </button>\n          :\n          <div className=\"countdown\">{roundCountdown}</div>\n        }\n      </div>\n      <div className=\"game-item\">\n        <div className=\"title\">🤖 AI</div>\n        <div className=\"player computer\">\n          {computerChoice !== -1 ? <div className=\"choice\">{this.renderChoice(computerChoice)}</div> : \"\"}\n        </div>\n      </div>\n    </div>)\n  }\n}\n\nexport default RockPaperScissorGame"],"sourceRoot":""}