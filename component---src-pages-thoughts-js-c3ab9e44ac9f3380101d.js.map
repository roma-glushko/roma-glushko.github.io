{"version":3,"sources":["webpack:///./src/components/thoughts/logo.js","webpack:///./src/pages/thoughts.js"],"names":["Logo","data","className","fluid","placeholderImage","childImageSharp","ThoughtListPage","render","edges","this","props","allMarkdownRemark","title","href","map","thought","to","node","frontmatter","path","date","timeToRead","excerpt","Component","pageQuery"],"mappings":"qJA+BeA,IAhBF,WACT,IAAMC,EAAI,OAYV,OAAO,kBAAC,IAAD,CAAKC,UAAU,WAAWC,MAAUF,EAAKG,iBAAiBC,gBAAgBF,U,0sDCnB/EG,E,gLACJC,OAAA,WAAU,IAC6BC,EAAaC,KAAKC,MAA/CT,KAAQU,kBAAqBH,MAErC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,MAAQ,WAAWV,UAAU,uBAClC,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,kBAAd,YACA,2BAAOA,UAAU,mBACf,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,UACX,kBAAC,IAAD,QAGN,yBAAKA,UAAU,QAAf,iBACA,uBAAGA,UAAU,qBAAb,yCAAuE,6BAAvE,gCAAyG,sCAAzG,MAEF,yBAAKA,UAAU,cACX,uBAAGW,KAAK,KAAR,mBAEJ,yBAAKX,UAAU,kBACX,kBAAC,IAAD,QAGN,8BAAUA,UAAU,iBACjBM,EAAMM,KAAI,SAAAC,GAAO,OAChB,6BAASb,UAAU,gBACjB,4BAAI,kBAAC,OAAD,CAAMc,GAAID,EAAQE,KAAKC,YAAYC,MAAOJ,EAAQE,KAAKC,YAAYN,QACvE,yBAAKV,UAAU,mBACb,0BAAMA,UAAU,qBAAqBa,EAAQE,KAAKC,YAAYE,MAC9D,qCACA,0BAAMlB,UAAU,qBAAqBa,EAAQE,KAAKI,WAAlD,cAEF,uBAAGnB,UAAU,kBAAkBa,EAAQE,KAAKK,iB,GAnC9BC,aA6CfjB,YAER,IAAMkB,EAAS","file":"component---src-pages-thoughts-js-c3ab9e44ac9f3380101d.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst Logo = () => {\n    const data = useStaticQuery(graphql `\n    query {\n      placeholderImage: file(relativePath: { eq: \"homepage/photo.jpeg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n    return <Img className=\"logo-img\" fluid = { data.placeholderImage.childImageSharp.fluid } />\n}\n\nexport default Logo","import React, { Component } from 'react';\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../components/theme/layout\"\nimport SEO from \"../components/seo\"\nimport Logo from \"../components/thoughts/logo\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\n\nimport \"../components/thoughts/thoughts.css\"\n\nclass ThoughtListPage extends Component {\n  render() {\n    const { data: { allMarkdownRemark: { edges } }} = this.props\n\n    return (\n      <Layout>\n        <SEO title = \"Thoughts\" className=\"thoughts-list-page\" />\n        <div className=\"thoughts-wrapper\">\n          <h1 className=\"thoughts-title\">Thoughts</h1>\n          <aside className=\"thought-sidebar\">\n            <div className=\"thought-author-wrapper\">\n              <div className=\"logo\">\n                <div className=\"avatar\">\n                    <Logo />\n                </div>\n              </div>\n              <div className=\"name\">Roman Glushko</div>\n              <p className=\"thoughtbook-descr\">Unpopular and totally wrong thoughts. <br/> Yeah, I know it. And that's <span>fine</span>.</p>\n            </div>\n            <div className=\"navigation\">\n                <a href=\"/\">← Take Me Home</a>\n            </div>\n            <div className=\"theme-switcher\">\n                <ThemeSwitcher />\n              </div>\n          </aside>\n          <articles className=\"thoughts-list\">\n            {edges.map(thought => (\n              <article className=\"thought-item\">\n                <h2><Link to={thought.node.frontmatter.path}>{thought.node.frontmatter.title}</Link></h2>\n                <div className=\"thought-details\">\n                  <time className=\"thought-createdat\">{thought.node.frontmatter.date}</time>\n                  <span> • </span>\n                  <span className=\"thought-time2read\">{thought.node.timeToRead} min read</span>\n                </div>\n                <p className=\"thought-digest\">{thought.node.excerpt}</p>\n              </article>\n            ))}\n          </articles>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default ThoughtListPage\n\nexport const pageQuery = graphql`\n  query ThoughtListQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 100)\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMM D, YYYY\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}