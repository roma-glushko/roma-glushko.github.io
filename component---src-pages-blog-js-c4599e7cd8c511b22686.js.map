{"version":3,"file":"component---src-pages-blog-js-c4599e7cd8c511b22686.js","mappings":"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","sources":["webpack://romaglushko.com/./src/components/analytics/reading-tracker.tsx","webpack://romaglushko.com/./src/components/blog/blog-teaser.tsx","webpack://romaglushko.com/./src/components/footer.tsx","webpack://romaglushko.com/./src/components/seo/breadcrumbs-snippet.tsx","webpack://romaglushko.com/./src/components/theme/logo.tsx","webpack://romaglushko.com/./src/components/theme/theme-switcher.tsx","webpack://romaglushko.com/./src/hooks/storage.tsx","webpack://romaglushko.com/./src/hooks/read-repository.ts","webpack://romaglushko.com/./src/components/theme/view-page-header.js","webpack://romaglushko.com/./src/pages/blog.js"],"sourcesContent":["import * as React from \"react\"\nimport { trackCustomEvent } from \"gatsby-plugin-google-analytics\"\nimport { ReactNode, useEffect, useState } from \"react\"\nimport useReadRepository, {\n  ReadState,\n  ReadStatuses,\n} from \"../../hooks/read-repository\"\n\nexport enum ContentTypes {\n  BLOG = \"blog\",\n  THOUGHT = \"thought\",\n  LAB = \"lab\",\n}\n\ninterface Props {\n  id: string\n  contentType: ContentTypes\n  children: ReactNode\n}\n\nconst ReadingTracker = (props: Props): JSX.Element => {\n  const [contentType] = useState<string>(props.contentType)\n  const [initializedAt] = useState<number>(new Date().getTime())\n  const [readingStarted, setReadingStarted] = useState<boolean>(false)\n  const [readingStartedAt, setReadingStartedAt] = useState<number>(0)\n  const [readingEnded, setReadingEnded] = useState<boolean>(false)\n  const [readingEndedAt, setReadingEndedAt] = useState<number>(0)\n\n  const [readRepository, saveReadRepository] = useReadRepository(\n    props.contentType\n  )\n\n  const trackReadingStart = (\n    intersectedSections: IntersectionObserverEntry[]\n  ) => {\n    const section: IntersectionObserverEntry = intersectedSections[0]\n\n    if (!section.isIntersecting || section.intersectionRatio <= 0) {\n      return\n    }\n\n    if (readingStarted) {\n      // already tracked start of reading\n      return\n    }\n\n    const startedAt: number = new Date().getTime()\n    const secondsUntilStartedReading: number = Math.round(\n      (startedAt - initializedAt) / 1000\n    )\n\n    window.requestAnimationFrame(() => {\n      trackCustomEvent({\n        category: \"content\",\n        action: \"startReading\",\n        label: contentType,\n        value: secondsUntilStartedReading,\n      })\n\n      typeof window !== \"undefined\" &&\n        window.gtag(\"event\", \"startReading\", {\n          event_category: \"content\",\n          event_label: contentType,\n          value: secondsUntilStartedReading,\n        })\n    })\n\n    setReadingStarted(true)\n    setReadingStartedAt(startedAt)\n\n    // mark content as in progress of reading\n\n    const readState: ReadState = readRepository[props.id] || {\n      status: ReadStatuses.READING,\n      changed_at: new Date(),\n    }\n\n    if (readState.status == ReadStatuses.FINISHED) {\n      // content was read fully once. Don't reset that status\n      return\n    }\n\n    readState.status = ReadStatuses.READING\n    readState.changed_at = new Date()\n\n    readRepository[props.id] = readState\n    saveReadRepository(readRepository)\n  }\n\n  const trackReading = (sections: IntersectionObserverEntry[]): void => {\n    if (!readingStarted) {\n      return\n    }\n\n    if (readingEnded) {\n      return\n    }\n\n    const currentReadingSections: string[] = []\n\n    sections.forEach((section) => {\n      if (!section.isIntersecting || section.intersectionRatio <= 0) {\n        return\n      }\n\n      currentReadingSections.push(section.target.getAttribute(\"id\") as string)\n    })\n\n    if (currentReadingSections.length === 0) {\n      return\n    }\n\n    window.requestAnimationFrame(() => {\n      const spentTimeReading = new Date().getTime()\n      const secondsReading = Math.round(\n        (spentTimeReading - readingStartedAt) / 1000\n      )\n\n      trackCustomEvent({\n        category: \"content\",\n        action: \"reading\",\n        label: contentType,\n        value: secondsReading,\n      })\n\n      typeof window !== \"undefined\" &&\n        window.gtag(\"event\", \"reading\", {\n          event_category: \"content\",\n          event_label: contentType,\n          value: secondsReading,\n        })\n    })\n\n    const readState: ReadState = readRepository[props.id] || {\n      status: ReadStatuses.READING,\n      changed_at: new Date(),\n    }\n\n    if (readState.status == ReadStatuses.FINISHED) {\n      // content was read fully once. Don't reset that status\n      return\n    }\n\n    readState.status = ReadStatuses.READING\n    readState.changed_at = new Date()\n\n    readRepository[props.id] = readState\n    saveReadRepository(readRepository)\n  }\n\n  const trackReadingEnd = (\n    intersectedSections: IntersectionObserverEntry[]\n  ): void => {\n    const endSection: IntersectionObserverEntry = intersectedSections[0]\n\n    if (!endSection.isIntersecting || endSection.intersectionRatio <= 0) {\n      return\n    }\n\n    if (readingEnded) {\n      // already tracked end of reading\n      return\n    }\n\n    const endedAt: number = new Date().getTime()\n\n    setReadingEnded(true)\n    setReadingEndedAt(endedAt)\n\n    const secondsUntilEndedReading = Math.round(\n      (readingEndedAt - readingStartedAt) / 1000\n    )\n\n    window.requestAnimationFrame(() => {\n      trackCustomEvent({\n        category: \"content\",\n        action: \"endReading\",\n        label: contentType,\n        value: secondsUntilEndedReading,\n      })\n\n      typeof window !== \"undefined\" &&\n        window.gtag(\"event\", \"endReading\", {\n          event_category: \"content\",\n          event_label: contentType,\n          value: secondsUntilEndedReading,\n        })\n    })\n\n    const readState: ReadState = readRepository[props.id]\n\n    if (readState && readState.status == ReadStatuses.FINISHED) {\n      // content was read fully once. Don't reset that status\n      return\n    }\n\n    readRepository[props.id] = {\n      status: ReadStatuses.FINISHED,\n      changed_at: new Date(),\n    }\n    saveReadRepository(readRepository)\n  }\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") {\n      return\n    }\n\n    const articleStart: HTMLElement = document.getElementById(\"intro\")\n    const articleEnd: HTMLElement = document.getElementById(\"content-end\")\n\n    const mainSections: HTMLHeadingElement[] = Array.from(\n      document.querySelectorAll(`.content h2[id]`)\n    )\n\n    const subSections: HTMLHeadingElement[] = Array.from(\n      document.querySelectorAll(\".content h3[id]\")\n    )\n    const allSections: HTMLElement[] = mainSections.concat(subSections)\n\n    const readingStartObserver = new IntersectionObserver(trackReadingStart)\n    const readingEndObserver = new IntersectionObserver(trackReadingEnd)\n    const readingObserver = new IntersectionObserver(trackReading)\n\n    allSections.forEach((section) => {\n      readingObserver.observe(section)\n    })\n\n    readingStartObserver.observe(articleStart)\n    readingEndObserver.observe(articleEnd)\n  }, [])\n\n  return (\n    <>\n      <div id=\"intro\" />\n      {props.children}\n      <div id=\"content-end\" />\n    </>\n  )\n}\n\nexport default ReadingTracker\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nimport useReadRepository, {\n  getStatusLabel,\n  ReadStatuses,\n} from \"../../hooks/read-repository\"\n\nimport \"./blog-teaser.css\"\nimport { ContentTypes } from \"../analytics/reading-tracker\"\n\nconst isNewArticle = (publishDate: string): boolean => {\n  const then = new Date(publishDate)\n  const now = new Date()\n\n  const msBetweenDates = Math.abs(then.getTime() - now.getTime())\n  const daysBetweenDates = msBetweenDates / (24 * 60 * 60 * 1000)\n\n  return daysBetweenDates < 30\n}\n\nconst BlogTeaser = (props) => {\n  const {\n    id,\n    title,\n    url,\n    timeToRead,\n    publishedHumanDate,\n    publishedFullDate,\n    excerpt,\n    cover,\n    keywords,\n  } = props\n\n  const [articleReadRepository, _] = useReadRepository(ContentTypes.BLOG)\n  const readingState = articleReadRepository[id]\n\n  const isFinished: boolean =\n    readingState && readingState.status == ReadStatuses.FINISHED\n  const isNew: boolean = isNewArticle(publishedFullDate)\n\n  return (\n    <article className=\"blog-item\">\n      <Link className=\"article-header\" to={url}>\n        <div className=\"cover-filter\">\n          <GatsbyImage className=\"cover\" image={cover} alt={title} />\n        </div>\n        {isNew ? (\n          <div\n            className={`new-badge`}\n            title={`Published less than a month ago`}\n          >\n            new\n          </div>\n        ) : (\n          \"\"\n        )}\n      </Link>\n      <div className=\"article-details\">\n        <h2>\n          <Link to={url}>{title}</Link>\n        </h2>\n        <div className=\"blog-details\">\n          <time className=\"blog-created-at\" dateTime={publishedFullDate}>\n            {publishedHumanDate}\n          </time>\n          <span> • </span>\n          <span className={`blog-time2read`}>\n            {timeToRead}\n            {timeToRead > 1 ? `mins` : `min`} read\n          </span>\n          {!isFinished ? (\n            <>\n              <span> • </span>\n              <span className={`unread-badge`}>\n                {getStatusLabel(readingState?.status)}\n              </span>\n            </>\n          ) : (\n            \"\"\n          )}\n        </div>\n        <p className=\"blog-digest\">{excerpt}</p>\n        <ul className=\"blog-tags\">\n          {keywords.map((keyword: string) => (\n            <li key={url + keyword}>{keyword}</li>\n          ))}\n        </ul>\n      </div>\n    </article>\n  )\n}\n\nBlogTeaser.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  publishedFullDate: PropTypes.string.isRequired,\n  publishedHumanDate: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n}\n\nexport default BlogTeaser\n","import * as React from \"react\"\nimport SocialLinks from \"./homepage/SocialLinks\"\n\nimport \"./Footer.css\"\n\nconst Footer = (): JSX.Element => {\n  const currentDate: Date = new Date()\n\n  return (\n    <footer data-nosnippet=\"\">\n      <div className=\"footer-wrapper\">\n        <SocialLinks showPatreon={true} iconSize={\"2x\"} />\n        <div className=\"copyright\">\n          Roman Glushko © 1996 - {currentDate.getFullYear()} <br />\n          <a\n            rel=\"license\"\n            href=\"https://creativecommons.org/licenses/by/4.0/\"\n            title=\"Content is published under CC BY 4.0 license\"\n          >\n            CC BY 4.0\n          </a>\n        </div>\n        <div className={`pgp`}>\n          <a href={`https://keybase.io/roman_hlushko`}>AB49 B91C C3E5 8E73</a>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import * as React from \"react\"\nimport Helmet from \"react-helmet\"\n\nimport { useWebsiteMetadata } from \"../../hooks/website-metadata\"\n\ninterface Breadcrumb {\n  \"@type\": string\n  position: number\n  name: string\n  item: string\n}\n\ntype Crumb = Record<string, string>\n\ninterface Props {\n  crumbs: Crumb[]\n}\n\nconst BreadcrumbsSnippet = ({ crumbs = [] }: Props): JSX.Element => {\n  const { siteUrl } = useWebsiteMetadata()\n\n  const crumbItems: Breadcrumb[] = [\n    {\n      \"@type\": \"ListItem\",\n      position: 1,\n      name: \"Home\",\n      item: `${siteUrl}/`,\n    },\n  ]\n\n  crumbs.forEach((crumbItem: Crumb, idx: number) => {\n    const [[path, title]] = Object.entries(crumbItem)\n\n    crumbItems.push({\n      \"@type\": \"ListItem\",\n      position: idx + 2, // adjustment for the first home item which is in 1 position\n      name: title,\n      item: `${siteUrl}${path}`,\n    })\n  })\n\n  const schemaJSONLD = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    itemListElement: crumbItems,\n  }\n\n  return (\n    <Helmet>\n      <script type=\"application/ld+json\">{JSON.stringify(schemaJSONLD)}</script>\n    </Helmet>\n  )\n}\n\nexport default BreadcrumbsSnippet\n","import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Logo = (): JSX.Element => {\n  // TODO: parametrize and unify this component with Avatar one\n  return (\n    <StaticImage\n      className=\"logo-img\"\n      src={`../../images/homepage/photo3.jpg`}\n      width={150}\n      quality={80}\n      formats={[\"auto\", \"webp\", \"avif\"]}\n      alt={`Roman Glushko`}\n    />\n  )\n}\n\nexport default Logo\n","import * as React from \"react\"\nimport { useState } from \"react\"\n\nimport { ThemeToggler } from \"gatsby-plugin-dark-mode\"\n\nimport \"./theme-switcher.css\"\n\nexport enum Themes {\n  DARK = `dark`,\n  LIGHT = `light`,\n}\n\ninterface ThemeProps {\n  theme: string\n  toggleTheme: (themeName: string) => void\n}\n\nconst ThemeSwitcher = (): JSX.Element => {\n  const [darkMode, setDarkMode] = useState(false)\n\n  return (\n    <ThemeToggler>\n      {({ theme, toggleTheme }: ThemeProps): JSX.Element => {\n        setDarkMode(theme === Themes.DARK)\n\n        const switchTheme = (): void => {\n          const newState = !darkMode\n\n          setDarkMode(newState)\n          toggleTheme(newState ? Themes.DARK : Themes.LIGHT)\n        }\n\n        const classNames: string =\n          \"theme-switcher-toggler\" +\n          (darkMode ? \" theme-switcher-toggler--checked\" : \"\")\n\n        return (\n          <div className={classNames} onClick={switchTheme}>\n            <div className=\"theme-switcher-track\" />\n            <div className=\"theme-switcher-thumb\" />\n\n            <input\n              className=\"theme-switcher-input\"\n              type=\"checkbox\"\n              checked={theme === Themes.DARK}\n              readOnly={true}\n              aria-label=\"Switch between Dark and Light modes\"\n            />\n          </div>\n        )\n      }}\n    </ThemeToggler>\n  )\n}\n\nexport default ThemeSwitcher\n","import { useState } from \"react\"\n\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    if (typeof window === \"undefined\") {\n      return initialValue\n    }\n\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error)\n      return initialValue\n    }\n  })\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n      // Save state\n      setStoredValue(valueToStore)\n      // Save to local storage\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore))\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n  return [storedValue, setValue] as const\n}\n\nexport default useLocalStorage\n","import useLocalStorage from \"./storage\"\nimport { ContentTypes } from \"../components/analytics/reading-tracker\"\n\nexport enum ReadStatuses {\n  READING = 1,\n  FINISHED = 2,\n}\n\nexport interface ReadState {\n  changed_at: Date\n  status: undefined | ReadStatuses\n}\n\ninterface ReadRepository {\n  [key: string]: ReadState\n}\n\nexport const getStatusLabel = (status: ReadStatuses | undefined) => {\n  if (status === undefined) {\n    return \"unread\"\n  }\n\n  if (status == ReadStatuses.READING) {\n    return \"reading\"\n  }\n\n  if (status == ReadStatuses.FINISHED) {\n    return \"finished\"\n  }\n\n  throw Error(`Unknown reading status: ${status}`)\n}\n\nconst useReadRepository = (type: ContentTypes) => {\n  return useLocalStorage<ReadRepository>(`read-${type}`, {})\n}\n\nexport default useReadRepository\n","import React from \"react\"\nimport Logo from \"../theme/logo\"\n\nimport \"./view-page-header.css\"\n\n// todo: refactor name of the component. This header is placed not only on the view pages but on the listings\n\nconst ViewPageHeader = ({ spaceTitle, spaceLink, isListing = false }) => {\n  return (\n    <div className=\"view-page-header\">\n      <div className=\"view-page-header-wrapper\">\n        <div className=\"logo-wrapper\">\n          <div className=\"logo\">\n            <Logo width={150} />\n          </div>\n          <div className=\"name\">\n            <a href={spaceLink} title=\"back to blog\">\n              Roman <br /> Glushko\n            </a>\n          </div>\n        </div>\n        {isListing && (\n          <h1 className=\"blog-title\">\n            <a href={spaceLink} title=\"back to the homepage\">\n              {spaceTitle}\n            </a>\n          </h1>\n        )}\n        {!isListing && (\n          <h2 className=\"blog-title\">\n            <a href={spaceLink} title=\"back to the homepage\">\n              {spaceTitle}\n            </a>\n          </h2>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default ViewPageHeader\n","import React, { Component } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/theme/layout\"\nimport Seo from \"../components/seo/seo\"\nimport ViewPageHeader from \"../components/theme/view-page-header\"\nimport MainNavigation from \"../components/main-navigation\"\nimport BlogTeaser from \"../components/blog/blog-teaser\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\nimport BreadcrumbsSnippet from \"../components/seo/breadcrumbs-snippet\"\nimport Footer from \"../components/footer\"\n\nimport \"./blog.css\"\n\nclass BlogListPage extends Component {\n  render() {\n    const {\n      data: {\n        allMarkdownRemark: { edges },\n      },\n    } = this.props\n\n    return (\n      <Layout>\n        <Seo\n          title=\"Blog\"\n          pagePath=\"/blog/\"\n          className=\"blog-list-page\"\n          description=\"Technical blog about machine learning, data science, math and software engineering\"\n          keywords={[\n            \"technical blog\",\n            \"machine learning blog\",\n            \"math\",\n            \"engineering\",\n            \"data science\",\n            \"roman glushko blog\",\n            \"roma glushko blog\",\n          ]}\n          meta={[]}\n        />\n        <div className=\"blog-listing-wrapper\">\n          <aside className=\"blog-sidebar\">\n            <div className=\"blog-header\">\n              <ViewPageHeader\n                spaceTitle=\"Blog\"\n                spaceLink=\"/blog/\"\n                isListing={true}\n              />\n              <MainNavigation space={\"blog\"} />\n            </div>\n            <div className=\"blog-intro\">\n              Technical notes about machine learning, data science, math and\n              software engineering. Recording what I learn everyday.\n            </div>\n            <div className=\"misc\">\n              <div className=\"theme-switcher\">\n                <ThemeSwitcher />\n              </div>\n            </div>\n          </aside>\n          <main\n            data-nosnippet=\"\"\n            className={`blog-list blog-grid ${!edges.length ? \"no-posts\" : \"\"}`}\n          >\n            {!edges.length && (\n              <div className=\"no-posts-placeholder\">\n                Great posts will be here as soon as my muse comes back to me{\" \"}\n                <span role=\"img\" aria-label=\"magic will happen soon\">\n                  💫\n                </span>{\" \"}\n                <br />\n                Come back soon{\" \"}\n                <span aria-label=\"bye\" role=\"img\">\n                  👋\n                </span>\n              </div>\n            )}\n            {edges.map(\n              ({\n                node: {\n                  timeToRead,\n                  frontmatter: {\n                    id,\n                    title,\n                    path,\n                    humanDate,\n                    fullDate,\n                    excerpt,\n                    keywords,\n                    cover: {\n                      childImageSharp: { gatsbyImageData },\n                    },\n                  },\n                },\n              }) => (\n                <BlogTeaser\n                  id={id}\n                  key={id}\n                  title={title}\n                  url={path}\n                  timeToRead={timeToRead}\n                  publishedHumanDate={humanDate}\n                  publishedFullDate={fullDate}\n                  excerpt={excerpt}\n                  cover={gatsbyImageData}\n                  keywords={keywords}\n                />\n              )\n            )}\n          </main>\n          <div className=\"clearfix\" />\n        </div>\n        <Footer />\n        <BreadcrumbsSnippet crumbs={[{ \"/blog/\": \"Blog\" }]} />\n      </Layout>\n    )\n  }\n}\n\nexport default BlogListPage\n\nexport const pageQuery = graphql`\n  query BlogListQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: {\n        fileAbsolutePath: { regex: \"/(blog)/\" }\n        frontmatter: { published: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            id\n            humanDate: date(formatString: \"MMM D, YYYY\")\n            fullDate: date(formatString: \"YYYY-MM-DD\")\n            path\n            title\n            keywords\n            excerpt\n            cover {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 620\n                  placeholder: BLURRED\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["ContentTypes","props","contentType","useState","initializedAt","Date","getTime","readingStarted","setReadingStarted","readingStartedAt","setReadingStartedAt","readingEnded","setReadingEnded","readingEndedAt","setReadingEndedAt","useReadRepository","readRepository","saveReadRepository","trackReadingStart","intersectedSections","section","isIntersecting","intersectionRatio","startedAt","secondsUntilStartedReading","Math","round","window","requestAnimationFrame","trackCustomEvent","category","action","label","value","gtag","event_category","event_label","readState","id","status","ReadStatuses","changed_at","trackReading","sections","currentReadingSections","forEach","push","target","getAttribute","length","spentTimeReading","secondsReading","trackReadingEnd","endSection","endedAt","secondsUntilEndedReading","useEffect","articleStart","document","getElementById","articleEnd","mainSections","Array","from","querySelectorAll","subSections","allSections","concat","readingStartObserver","IntersectionObserver","readingEndObserver","readingObserver","observe","React","children","then","now","title","url","timeToRead","publishedHumanDate","publishedFullDate","excerpt","cover","keywords","articleReadRepository","readingState","isFinished","isNew","abs","className","Link","to","GatsbyImage","image","alt","dateTime","getStatusLabel","map","keyword","key","currentDate","SocialLinks","showPatreon","iconSize","getFullYear","rel","href","crumbs","siteUrl","useWebsiteMetadata","crumbItems","position","name","item","crumbItem","idx","Object","entries","path","schemaJSONLD","itemListElement","Helmet","type","JSON","stringify","StaticImage","src","width","quality","formats","Themes","darkMode","setDarkMode","ThemeToggler","theme","toggleTheme","DARK","classNames","onClick","newState","LIGHT","checked","readOnly","initialValue","localStorage","getItem","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","undefined","READING","FINISHED","Error","useLocalStorage","spaceTitle","spaceLink","isListing","BlogListPage","render","edges","this","data","allMarkdownRemark","pagePath","description","meta","space","role","node","frontmatter","humanDate","fullDate","gatsbyImageData","childImageSharp","Component"],"sourceRoot":""}