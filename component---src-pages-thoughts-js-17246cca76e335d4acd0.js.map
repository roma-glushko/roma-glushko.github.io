{"version":3,"sources":["webpack:///./src/components/thoughts/logo.js","webpack:///./src/components/thoughts/thought-author.js","webpack:///./src/components/thoughts/thought-teaser.js","webpack:///./src/pages/thoughts.js"],"names":["Logo","data","className","fluid","placeholderImage","childImageSharp","ThoughtAuthor","ThoughtTeaser","props","title","url","timeToRead","publishedDate","excerpt","to","ThoughtListPage","render","edges","this","allMarkdownRemark","description","map","thought","node","frontmatter","path","date","Component","pageQuery"],"mappings":"uJA+BeA,EAhBF,WACT,IAAMC,EAAI,OAYV,OAAO,kBAAC,IAAD,CAAKC,UAAU,WAAWC,MAAUF,EAAKG,iBAAiBC,gBAAgBF,S,UCTtEG,IAdO,WACpB,OACE,yBAAKJ,UAAU,0BACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,QAGR,yBAAKA,UAAU,QAAf,qBACA,uBAAGA,UAAU,yBAAb,yCAA2E,6BAA3E,gCAA6G,sCAA7G,Q,kpDCuBOK,G,UA/BO,SAACC,GAAW,IAG1BC,EAKAD,EALAC,MACAC,EAIAF,EAJAE,IACAC,EAGAH,EAHAG,WACAC,EAEAJ,EAFAI,cACAC,EACAL,EADAK,QAGJ,OACI,6BAASX,UAAU,gBACf,4BAAI,kBAAC,OAAD,CAAMY,GAAIJ,GAAMD,IACpB,yBAAKP,UAAU,mBACX,0BAAMA,UAAU,qBAAqBU,GACrC,qCACA,0BAAMV,UAAU,qBAAqBS,EAArC,cAEJ,uBAAGT,UAAU,kBAAkBW,M,wDCdrCE,E,gLACJC,OAAA,WAAU,IAC6BC,EAAaC,KAAKV,MAA/CP,KAAQkB,kBAAqBF,MAErC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACER,MAAQ,WACRP,UAAU,qBACVkB,YAAY,4EAEd,yBAAKlB,UAAU,oBACb,wBAAIA,UAAU,kBAAd,YACA,2BAAOA,UAAU,mBACf,kBAAC,IAAD,MACA,yBAAKA,UAAU,cACX,kBAAC,OAAD,CAAMY,GAAG,KAAT,mBAEJ,yBAAKZ,UAAU,kBACX,kBAAC,IAAD,QAGN,0BAAMA,UAAU,iBACbe,EAAMI,KAAI,SAAAC,GAAO,OAChB,kBAAC,EAAD,CACEb,MAAOa,EAAQC,KAAKC,YAAYf,MAChCC,IAAKY,EAAQC,KAAKC,YAAYC,KAC9Bd,WAAYW,EAAQC,KAAKZ,WACzBC,cAAeU,EAAQC,KAAKC,YAAYE,KACxCb,QAASS,EAAQC,KAAKV,cAI5B,yBAAKX,UAAU,gB,GAjCKyB,aA0CjBC,GAFEb,YAEO","file":"component---src-pages-thoughts-js-17246cca76e335d4acd0.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst Logo = () => {\n    const data = useStaticQuery(graphql `\n    query {\n      placeholderImage: file(relativePath: { eq: \"homepage/photo.jpeg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n    return <Img className=\"logo-img\" fluid = { data.placeholderImage.childImageSharp.fluid } />\n}\n\nexport default Logo","import React from \"react\";\nimport Logo from \"./logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = () => {\n  return (\n    <div className=\"thought-author-wrapper\">\n        <div className=\"logo\">\n            <div className=\"avatar\">\n                <Logo />\n            </div>\n        </div>\n        <div className=\"name\">• Roman Glushko •</div>\n        <p className=\"thought-section-descr\">Unpopular and totally wrong thoughts. <br/> Yeah, I know it. And that's <span>fine</span>.</p>\n    </div>\n  );\n};\n\nexport default ThoughtAuthor;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\"\n\nimport \"./thought-teaser.css\"\n\nconst ThoughtTeaser = (props) => {\n\n    const {\n        title,\n        url,\n        timeToRead,\n        publishedDate,\n        excerpt,\n    } = props;\n\n    return (\n        <article className=\"thought-item\">\n            <h2><Link to={url}>{title}</Link></h2>\n            <div className=\"thought-details\">\n                <time className=\"thought-createdat\">{publishedDate}</time>\n                <span> • </span>\n                <span className=\"thought-time2read\">{timeToRead} min read</span>\n            </div>\n            <p className=\"thought-digest\">{excerpt}</p>\n        </article>\n    );\n};\n\nThoughtTeaser.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    timeToRead: PropTypes.string.isRequired,\n    publishedDate: PropTypes.string.isRequired,\n    excerpt: PropTypes.string.isRequired,\n  };\n\nexport default ThoughtTeaser;","import React, { Component } from 'react';\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../components/theme/layout\"\nimport SEO from \"../components/seo\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\nimport ThoughtTeaser from '../components/thoughts/thought-teaser'\n\nimport \"./thoughts.css\"\n\nclass ThoughtListPage extends Component {\n  render() {\n    const { data: { allMarkdownRemark: { edges } }} = this.props\n\n    return (\n      <Layout>\n        <SEO \n          title = \"Thoughts\" \n          className=\"thoughts-list-page\" \n          description=\"Unpopular and totally wrong thoughts. Yeah, I know it. And that's fine.\" \n        />\n        <div className=\"thoughts-wrapper\">\n          <h1 className=\"thoughts-title\">Thoughts</h1>\n          <aside className=\"thought-sidebar\">\n            <ThoughtAuthor />\n            <div className=\"navigation\">\n                <Link to=\"/\">← Take Me Home</Link>\n            </div>\n            <div className=\"theme-switcher\">\n                <ThemeSwitcher />\n              </div>\n          </aside>\n          <main className=\"thoughts-list\">\n            {edges.map(thought => (\n              <ThoughtTeaser \n                title={thought.node.frontmatter.title} \n                url={thought.node.frontmatter.path} \n                timeToRead={thought.node.timeToRead} \n                publishedDate={thought.node.frontmatter.date} \n                excerpt={thought.node.excerpt} \n              />\n            ))}\n          </main>\n          <div className=\"clearfix\" />\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default ThoughtListPage\n\nexport const pageQuery = graphql`\n  query ThoughtListQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 100)\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMM D, YYYY\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}