{"version":3,"sources":["webpack:///./src/components/thoughts/thought-author.js","webpack:///./src/components/thoughts/thought.js","webpack:///./src/components/thoughts/thought-navigation.js","webpack:///./src/templates/thoughtTemplate.js","webpack:///./src/components/blog/newsletter-form.js"],"names":["ThoughtAuthor","className","Thought","props","title","timeToRead","publishedHumanDate","publishedFullDate","contentHtml","cover","coverCredits","fluid","childImageSharp","dangerouslySetInnerHTML","__html","space","dateTime","id","ThoughtNavigation","next","frontmatter","nextTitle","nextUrl","path","prev","prevTitle","prevUrl","rel","to","Template","data","pageContext","prevThought","nextThought","markdownRemark","humanDate","fullDate","keywords","html","rawMarkdownBody","excerpt","words","wordCount","pagePath","imagePath","src","ogType","description","meta","tags","datePublished","dateModified","content","articleSection","genre","contentType","crumbs","pageQuery","NewsletterForm","loading","width","height","style","border","frameborder","scrolling"],"mappings":"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","file":"component---src-templates-thought-template-js-5d3117151848a0aee9c1.js","sourcesContent":["import React from \"react\";\nimport Logo from \"../theme/logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = () => {\n  return (\n    <div className=\"thought-author-wrapper\">\n      <div className=\"logo\">\n        <div className=\"avatar\">\n          <Logo />\n        </div>\n      </div>\n      <div className=\"name\">• Roman Glushko •</div>\n      <p className=\"thought-section-descr\">My thoughts, pieces of advice and life experience <br />that will help you to <strong>overcome</strong> your life struggles</p>\n    </div>\n  );\n};\n\nexport default ThoughtAuthor;","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Img from \"gatsby-image\"\n\nimport MainNavigation from \"../theme/main-navigation\"\nimport ThemeSwitcher from \"../theme/theme-switcher\"\n\nimport \"./thought.css\"\nimport \"../theme/content.css\"\n\nconst Thought = (props) => {\n\n    const {\n        title,\n        timeToRead,\n        publishedHumanDate,\n        publishedFullDate,\n        contentHtml,\n        cover,\n        coverCredits,\n    } = props;\n\n    return (\n        <article className=\"thought-wrapper\">\n            <header>\n                <figure className=\"cover\">\n                    <div className=\"cover-filter\">\n                        <Img className=\"cover cover-image\" fluid={cover.childImageSharp.fluid} />\n                    </div>\n                    <figcaption className=\"image-title\" dangerouslySetInnerHTML={{ __html: coverCredits }}></figcaption>\n                </figure>\n                <MainNavigation space={\"thoughts\"} />\n                <h1>{title}</h1>\n                <div className=\"thought-details\">\n                    <time className=\"thought-createdat\" dateTime={publishedFullDate}>{publishedHumanDate}</time>\n                    <span> • </span>\n                    <span className=\"thought-time2read\">{timeToRead}min read</span>\n                    <div className=\"theme-switcher\">\n                        <ThemeSwitcher />\n                    </div>\n                </div>\n            </header>\n            <div id=\"intro\" className=\"thought-divider\" />\n            <div\n                className=\"content thought-content\"\n                dangerouslySetInnerHTML={{ __html: contentHtml }}\n            />\n            <div id=\"content-end\" />\n        </article>\n    );\n};\n\nThought.propTypes = {\n    title: PropTypes.string.isRequired,\n    timeToRead: PropTypes.number.isRequired,\n    publishedHumanDate: PropTypes.string.isRequired,\n    publishedFullDate: PropTypes.string.isRequired,\n    contentHtml: PropTypes.string.isRequired,\n};\n\nexport default Thought","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\";\n\nimport \"./thought-navigation.css\"\n\nconst ThoughtNavigation = props => {\n\n  const {\n    next: {\n      frontmatter: { title: nextTitle, path: nextUrl } = {}\n    } = {},\n    prev: {\n      frontmatter: { title: prevTitle, path: prevUrl } = {}\n    } = {}\n  } = props;\n\n  return (\n    <div className=\"thought-navigation-wrapper\">\n      <nav className=\"thought-navigation\">\n        <div className=\"nav-links\">\n          {nextUrl && (\n            <Link rel=\"next\" className=\"next-thought\" to={nextUrl}>\n              {nextTitle} →\n            </Link>\n          )}\n          {prevUrl && (\n            <Link rel=\"prev\" className=\"prev-thought\" to={prevUrl}>\n              ← {prevTitle}\n            </Link>\n          )}\n          <Link className=\"all-thoughts\" to=\"/thoughts/\">All Thoughts</Link>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nThoughtNavigation.propTypes = {\n  next: PropTypes.object,\n  prev: PropTypes.object,\n};\n\nexport default ThoughtNavigation;","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport Thought from \"../components/thoughts/thought\"\nimport ThoughtNavigation from \"../components/thoughts/thought-navigation\"\nimport Layout from \"../components/theme/layout\"\nimport Footer from \"../components/theme/footer\"\nimport SEO from \"../components/seo\"\nimport NewsletterForm from '../components/blog/newsletter-form'\nimport ShareBlock from '../components/thoughts/share-block'\nimport BreadcrumbsRichSnippet from \"../components/theme/breadcrumbs-rich-snippet\"\nimport ReadingAnalytics from \"../components/blog/reading-analytics\"\nimport ArticleRichSnippet from \"../components/thoughts/article-rich-snippet\"\n\nimport \"./thought-view.css\"\n\n\nexport default function Template({ data, pageContext: { prevThought, nextThought } }) {\n  const {\n    markdownRemark: {\n      frontmatter: {\n        path,\n        title,\n        humanDate,\n        fullDate,\n        keywords,\n        cover,\n        coverCredits,\n      },\n      html,\n      rawMarkdownBody,\n      timeToRead,\n      excerpt,\n      wordCount: { words },\n      // parent: {\n      //   fields: {\n      //     gitLogLatestDate = ''\n      //   } = {}\n      // } = {}\n    },\n  } = data\n\n  return (\n    <Layout>\n      <SEO\n        title={title + \" - Thoughts\"}\n        className=\"thought-view-page\"\n        pagePath={path}\n        imagePath={cover.childImageSharp.fluid.src}\n        ogType=\"article\"\n        description={excerpt}\n        keywords={keywords}\n        meta={[]}\n      />\n      <div className=\"thoughts-title\">\n        <Link to=\"/thoughts/\">Thoughts</Link>\n      </div>\n      <main>\n        <Thought \n          title={title} \n          timeToRead={timeToRead} \n          publishedHumanDate={humanDate} \n          publishedFullDate={fullDate} \n          cover={cover}\n          coverCredits={coverCredits}\n          contentHtml={html} \n        />\n        <ShareBlock title={title} path={path} tags={keywords} />\n        <NewsletterForm />\n      </main>\n      <aside className=\"thought-sidebar\">\n        <ThoughtAuthor />\n        <ThoughtNavigation prev={prevThought} next={nextThought} />\n      </aside>\n      <Footer />\n      <ArticleRichSnippet\n        title={title}\n        path={path}\n        datePublished={fullDate}\n        dateModified={fullDate} // gitLogLatestDate\n        content={rawMarkdownBody}\n        wordCount={words}\n        keywords={keywords}\n        cover={cover}\n        articleSection={\"Thoughts\"}\n        genre={[\"self-improvement\", \"management\", \"thoughts\", \"life experience\", \"life exploration\"]}\n      />\n      <ReadingAnalytics contentType={`thought`} />\n      <BreadcrumbsRichSnippet crumbs={[{'/thoughts/': 'Thoughts'}, {[path]: title}]} />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      timeToRead\n      excerpt\n      rawMarkdownBody\n      wordCount {\n        words\n      }\n      frontmatter {\n        path\n        humanDate: date(formatString: \"MMM D, YYYY\")\n        fullDate: date (formatString: \"YYYY-MM-DD\") \n        title\n        keywords\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 3400) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        coverCredits\n      }\n      parent {\n        ... on File {\n          fields {\n            gitLogLatestDate\n          }\n        }\n      }\n    }\n  }\n`","\nimport React from \"react\"\n\nimport \"./newsletter-form.css\"\n\nconst NewsletterForm = () => {\n  return (\n    <div className=\"newsletter-form\">\n      <iframe src=\"https://romanglushko.substack.com/embed\"\n        loading=\"lazy\"\n        width=\"100%\" height=\"320\" \n        style={{border: '1px solid #EEE'}}\n        frameborder=\"0\" scrolling=\"no\" title=\"Newsletter Form\"\n      ></iframe>\n    </div>\n  );\n};\n\nexport default NewsletterForm;"],"sourceRoot":""}