{"version":3,"sources":["webpack:///./src/components/thoughts/logo.js","webpack:///./src/components/thoughts/thought-author.js","webpack:///./src/components/thoughts/thought.js","webpack:///./src/components/thoughts/thought-navigation.js","webpack:///./src/templates/thoughtTemplate.js"],"names":["Logo","data","className","fluid","placeholderImage","childImageSharp","ThoughtAuthor","Thought","props","title","timeToRead","publishedDate","contentHtml","dangerouslySetInnerHTML","__html","ThoughtNavigation","next","frontmatter","nextTitle","nextUrl","path","prev","prevTitle","prevUrl","rel","to","Template","markdownRemark","date","html","pageContext","prevThought","nextThought","pageQuery"],"mappings":"uJA+BeA,EAhBF,WACT,IAAMC,EAAI,OAYV,OAAO,kBAAC,IAAD,CAAKC,UAAU,WAAWC,MAAUF,EAAKG,iBAAiBC,gBAAgBF,S,UCTtEG,IAdO,WACpB,OACE,yBAAKJ,UAAU,0BACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,QAGR,yBAAKA,UAAU,QAAf,qBACA,uBAAGA,UAAU,yBAAb,yCAA2E,6BAA3E,gCAA6G,sCAA7G,Q,sGC8BOK,G,oBApCC,SAACC,GAAW,IAGpBC,EAIAD,EAJAC,MACAC,EAGAF,EAHAE,WACAC,EAEAH,EAFAG,cACAC,EACAJ,EADAI,YAGJ,OACI,6BAASV,UAAU,mBACf,4BAAKO,GACL,yBAAKP,UAAU,mBACf,0BAAMA,UAAU,qBAAqBS,GACrC,qCACA,0BAAMT,UAAU,qBAAqBQ,EAArC,aACA,yBAAKR,UAAU,kBACX,kBAAC,IAAD,QAGJ,yBAAKA,UAAU,oBACf,yBACIA,UAAU,kBACVW,wBAAyB,CAAEC,OAAQF,QCcpCG,G,UAvCW,SAAAP,GAAU,IAAD,EAS7BA,EANFQ,KAH+B,gBAK3B,GAL2B,GAI7BC,YAAsBC,GAJO,aAIsB,GAJtB,GAIdT,MAAwBU,EAJV,EAIIC,KAJJ,EAS7BZ,EAHFa,KAN+B,gBAQ3B,GAR2B,GAO7BJ,YAAsBK,GAPO,aAOsB,GAPtB,GAOdb,MAAwBc,EAPV,EAOIH,KAIrC,GAAKD,GAAYI,EAEjB,OACE,yBAAKrB,UAAU,8BACX,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,aACdiB,GACG,kBAAC,OAAD,CAAMK,IAAI,OAAOtB,UAAU,eAAeuB,GAAIN,GACzCD,EADL,MAIHK,GACC,kBAAC,OAAD,CAAMC,IAAI,OAAOtB,UAAU,eAAeuB,GAAIF,GAA9C,KACOD,GAGP,kBAAC,OAAD,CAAMpB,UAAU,eAAeuB,GAAG,aAAlC,qB,kCCvBG,SAASC,EAAT,GAGX,IAAD,IAFDzB,KAAO0B,eAEN,IAFuBV,YAAcR,EAErC,EAFqCA,MAAOmB,EAE5C,EAF4CA,KAAOC,EAEnD,EAFmDA,KAAMnB,EAEzD,EAFyDA,WAEzD,IADDoB,YAAeC,EACd,EADcA,YAAaC,EAC3B,EAD2BA,YAE5B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKvB,MAASA,EAAQ,cAAeP,UAAU,sBAC7C,yBAAKA,UAAU,kBACb,kBAAC,OAAD,CAAMuB,GAAG,aAAT,aAEF,kBAAC,EAAD,CAAShB,MAAOA,EAAOC,WAAYA,EAAYC,cAAeiB,EAAMhB,YAAaiB,IACjF,2BAAO3B,UAAU,mBACf,kBAAC,IAAD,MACA,kBAAC,EAAD,CAAmBmB,KAAMU,EAAaf,KAAMgB,MAvBtD,kFA6BO,IAAMC,EAAS,c","file":"component---src-templates-thought-template-js-8a9e7374f5b12d0875fc.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst Logo = () => {\n    const data = useStaticQuery(graphql `\n    query {\n      placeholderImage: file(relativePath: { eq: \"homepage/photo.jpeg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n    return <Img className=\"logo-img\" fluid = { data.placeholderImage.childImageSharp.fluid } />\n}\n\nexport default Logo","import React from \"react\";\nimport Logo from \"./logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = () => {\n  return (\n    <div className=\"thought-author-wrapper\">\n        <div className=\"logo\">\n            <div className=\"avatar\">\n                <Logo />\n            </div>\n        </div>\n        <div className=\"name\">• Roman Glushko •</div>\n        <p className=\"thought-section-descr\">Unpopular and totally wrong thoughts. <br/> Yeah, I know it. And that's <span>fine</span>.</p>\n    </div>\n  );\n};\n\nexport default ThoughtAuthor;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ThemeSwitcher from \"../theme/theme-switcher\"\n\nimport \"./thought.css\"\nimport \"./thought-content.css\"\n\nconst Thought = (props) => {\n\n    const {\n        title,\n        timeToRead,\n        publishedDate,\n        contentHtml,\n    } = props;\n\n    return (\n        <article className=\"thought-wrapper\">\n            <h1>{title}</h1>\n            <div className=\"thought-details\">\n            <time className=\"thought-createdat\">{publishedDate}</time>\n            <span> • </span>\n            <span className=\"thought-time2read\">{timeToRead} min read</span>\n            <div className=\"theme-switcher\">\n                <ThemeSwitcher />\n            </div>\n            </div>\n            <div className=\"thought-divider\" />\n            <div\n                className=\"thought-content\"\n                dangerouslySetInnerHTML={{ __html: contentHtml }}\n            />\n        </article>\n    );\n};\n\nThought.propTypes = {\n    title: PropTypes.string.isRequired,\n    timeToRead: PropTypes.string.isRequired,\n    publishedDate: PropTypes.string.isRequired,\n    contentHtml: PropTypes.string.isRequired,\n  };\n\nexport default Thought;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\";\n\nimport \"./thought-navigation.css\"\n\nconst ThoughtNavigation = props => {\n\n  const {\n    next: {\n      frontmatter: { title: nextTitle, path: nextUrl } = {}\n    } = {},\n    prev: {\n      frontmatter: { title: prevTitle, path: prevUrl } = {}\n    } = {}\n  } = props;\n\n  if (!nextUrl && !prevUrl) return;\n\n  return (\n    <div className=\"thought-navigation-wrapper\">\n        <nav className=\"thought-navigation\">\n          <div className=\"nav-links\">\n          {nextUrl && (\n              <Link rel=\"next\" className=\"next-thought\" to={nextUrl}>\n                  {nextTitle} →\n              </Link>\n          )}\n          {prevUrl && (\n            <Link rel=\"prev\" className=\"prev-thought\" to={prevUrl}>\n                ← {prevTitle} \n            </Link>\n          )}\n            <Link className=\"all-thoughts\" to=\"/thoughts\">All Thoughts</Link>\n          </div>\n        </nav>\n    </div>\n  );\n};\n\nThoughtNavigation.propTypes = {\n  next: PropTypes.object,\n  prev: PropTypes.object,\n};\n\nexport default ThoughtNavigation;","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport Thought from \"../components/thoughts/thought\"\nimport ThoughtNavigation from \"../components/thoughts/thought-navigation\"\nimport Layout from \"../components/theme/layout\"\nimport SEO from \"../components/seo\"\n\nimport \"../components/thoughts/thought-view.css\"\n\nexport default function Template({\n  data: {markdownRemark: {frontmatter: {title, date}, html, timeToRead}},\n  pageContext: { prevThought, nextThought }\n}) {\n  return (\n    <Layout>\n      <SEO title = {title + \" • Thoughts\"} className=\"thought-view-page\" />\n        <div className=\"thoughts-title\">\n          <Link to=\"/thoughts\">Thoughts</Link>\n        </div>\n        <Thought title={title} timeToRead={timeToRead} publishedDate={date} contentHtml={html} />\n        <aside className=\"thought-sidebar\">\n          <ThoughtAuthor />\n          <ThoughtNavigation prev={prevThought} next={nextThought} />\n        </aside>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      timeToRead\n      frontmatter {\n        date(formatString: \"MMM D, YYYY\")\n        path\n        title\n      }\n    }\n  }\n`"],"sourceRoot":""}