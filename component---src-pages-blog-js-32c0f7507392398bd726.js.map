{"version":3,"sources":["webpack:///./src/components/theme/logo.js","webpack:///./src/components/theme/footer.js","webpack:///./src/components/blog/blog-header.js","webpack:///./src/components/blog/blog-teaser.js","webpack:///./src/pages/blog.js"],"names":["Logo","data","className","fluid","placeholderImage","childImageSharp","Footer","iconSize","Date","getFullYear","BlogHeader","to","space","BlogTeaser","props","title","url","timeToRead","publishedHumanDate","publishedFullDate","excerpt","cover","dateTime","BlogListPage","render","edges","this","allMarkdownRemark","pagePath","description","keywords","length","map","blogpost","key","node","id","frontmatter","path","humanDate","fullDate","Component","pageQuery"],"mappings":"wuDA+BeA,IAhBF,WACX,IAAMC,EAAI,OAYV,OAAO,kBAAC,IAAD,CAAKC,UAAU,WAAWC,MAAOF,EAAKG,iBAAiBC,gBAAgBF,U,kCC3BhF,+CAyBeG,IApBA,WAQb,OACE,gCACE,yBAAKJ,UAAU,kBACb,kBAAC,IAAD,CAAaK,SAAS,OACtB,yBAAKL,UAAU,aAAf,2BAC0B,IAAIM,MAAOC,mB,wKCK9BC,G,UAjBI,WACjB,OACE,yBAAKR,UAAU,eACX,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,QACX,kBAAC,IAAD,OAEJ,yBAAKA,UAAU,QAAO,kBAAC,OAAD,CAAMS,GAAG,UAAT,SAAwB,6BAAxB,cAE1B,wBAAIT,UAAU,cAAa,kBAAC,OAAD,CAAMS,GAAG,UAAT,UAE7B,kBAAC,IAAD,CAAgBC,MAAO,Y,qBC0BhBC,G,UAtCI,SAACC,GAAW,IAGvBC,EAOAD,EAPAC,MACAC,EAMAF,EANAE,IACAC,EAKAH,EALAG,WACAC,EAIAJ,EAJAI,mBACAC,EAGAL,EAHAK,kBACAC,EAEAN,EAFAM,QACAC,EACAP,EADAO,MAGJ,OACI,6BAASnB,UAAU,aACf,kBAAC,OAAD,CAAMS,GAAIK,GACN,yBAAKd,UAAU,gBACX,kBAAC,IAAD,CAAKA,UAAU,QAAQC,MAAOkB,EAAMhB,gBAAgBF,UAG5D,4BAAI,kBAAC,OAAD,CAAMQ,GAAIK,GAAMD,IACpB,yBAAKb,UAAU,gBACX,0BAAMA,UAAU,kBAAkBoB,SAAUH,GAAoBD,GAChE,qCACA,0BAAMhB,UAAU,kBAAkBe,EAAlC,cAEJ,uBAAGf,UAAU,eAAekB,M,sCCrBlCG,E,gLACJC,OAAA,WAAU,IAC6BC,EAAcC,KAAKZ,MAAhDb,KAAQ0B,kBAAqBF,MAErC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEV,MAAM,OACNa,SAAS,SACT1B,UAAU,iBACV2B,YAAY,qFACZC,SAAU,CACR,iBACA,wBACA,OACA,cACA,eACA,qBACA,uBAGJ,yBAAK5B,UAAU,gBACb,2BAAOA,UAAU,gBACf,kBAAC,EAAD,MACA,yBAAKA,UAAU,cAAf,uFAGA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,kBACb,kBAAC,IAAD,SAIN,0BAAMA,UAAS,wBAA0BuB,EAAMM,OAAsB,GAAb,cACpDN,EAAMM,QACR,yBAAK7B,UAAU,wBAAf,mEACkE,6BADlE,qBAICuB,EAAMO,KAAI,SAAAC,GAAQ,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAASE,KAAKC,GACnBrB,MAAOkB,EAASE,KAAKE,YAAYtB,MACjCC,IAAKiB,EAASE,KAAKE,YAAYC,KAC/BrB,WAAYgB,EAASE,KAAKlB,WAC1BC,mBAAoBe,EAASE,KAAKE,YAAYE,UAC9CpB,kBAAmBc,EAASE,KAAKE,YAAYG,SAC7CpB,QAASa,EAASE,KAAKf,QACvBC,MAAOY,EAASE,KAAKE,YAAYhB,YAIvC,yBAAKnB,UAAU,cAEjB,kBAAC,IAAD,Q,GAtDmBuC,aA8DdC,GAFEnB,YAEO,e","file":"component---src-pages-blog-js-32c0f7507392398bd726.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst Logo = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"homepage/photo.jpeg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 160) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img className=\"logo-img\" fluid={data.placeholderImage.childImageSharp.fluid} />\n}\n\nexport default Logo","\nimport React from \"react\"\nimport SocialLinks from \"../homepage/social-links\"\n\nimport \"./footer.css\"\n\nconst Footer = () => {\n  /**\n   * <div className=\"footer-separator\">\n          <span className=\"separator\"></span>\n          <span className=\"separator\"></span>\n          <span className=\"separator\"></span>\n        </div>\n   */\n  return (\n    <footer>\n      <div className=\"footer-wrapper\">\n        <SocialLinks iconSize=\"2x\" />\n        <div className=\"copyright\">\n          Roman Glushko Â© 1996 - {new Date().getFullYear()}\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","import React from 'react'\nimport { Link } from \"gatsby\"\nimport Logo from \"../theme/logo\"\nimport MainNavigation from \"../theme/main-navigation\"\n\nimport \"./blog-header.css\"\n\nconst BlogHeader = () => {\n  return (\n    <div className=\"blog-header\">\n        <div className=\"blog-header-wrapper\">\n          <div className=\"logo-wrapper\">\n              <div className=\"logo\">\n                  <Logo />\n              </div>\n              <div className=\"name\"><Link to=\"/blog/\">Roman <br /> Glushko</Link></div>\n          </div>\n          <h1 className=\"blog-title\"><Link to=\"/blog/\">Blog</Link></h1>\n        </div>\n        <MainNavigation space={\"blog\"} />\n    </div>\n  )\n}\n\nexport default BlogHeader","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport \"./blog-teaser.css\"\n\nconst BlogTeaser = (props) => {\n\n    const {\n        title,\n        url,\n        timeToRead,\n        publishedHumanDate,\n        publishedFullDate,\n        excerpt,\n        cover,\n    } = props;\n\n    return (\n        <article className=\"blog-item\">\n            <Link to={url}>\n                <div className=\"cover-filter\">\n                    <Img className=\"cover\" fluid={cover.childImageSharp.fluid} />\n                </div>\n            </Link>\n            <h2><Link to={url}>{title}</Link></h2>\n            <div className=\"blog-details\">\n                <time className=\"blog-created-at\" dateTime={publishedFullDate}>{publishedHumanDate}</time>\n                <span> â€¢ </span>\n                <span className=\"blog-time2read\">{timeToRead} min read</span>\n            </div>\n            <p className=\"blog-digest\">{excerpt}</p>\n        </article>\n    );\n};\n\nBlogTeaser.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    timeToRead: PropTypes.number.isRequired,\n    publishedDate: PropTypes.string.isRequired,\n    excerpt: PropTypes.string.isRequired,\n  };\n\nexport default BlogTeaser;","import React, { Component } from 'react';\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/theme/layout\"\nimport SEO from \"../components/seo\"\nimport BlogHeader from \"../components/blog/blog-header\"\nimport BlogTeaser from \"../components/blog/blog-teaser\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\nimport Footer from \"../components/theme/footer\"\n\nimport \"./blog.css\"\n\nclass BlogListPage extends Component {\n  render() {\n    const { data: { allMarkdownRemark: { edges } } } = this.props\n\n    return (\n      <Layout>\n        <SEO\n          title=\"Blog\"\n          pagePath=\"/blog/\"\n          className=\"blog-list-page\"\n          description=\"Technical blog about machine learning, data science, math and software engineering\"\n          keywords={[\n            'technical blog',\n            'machine learning blog',\n            'math',\n            'engineering',\n            'data science',\n            'roman glushko blog',\n            'roma glushko blog',\n          ]}\n        />\n        <div className=\"blog-wrapper\">\n          <aside className=\"blog-sidebar\">\n            <BlogHeader />\n            <div className=\"blog-intro\">\n              Technical blog about machine learning, data science, math and software engineering.\n            </div>\n            <div className=\"misc\">\n              <div className=\"theme-switcher\">\n                <ThemeSwitcher />\n              </div>\n            </div>\n          </aside>\n          <main className={`blog-list blog-grid ${!edges.length ? \"no-posts\" : \"\"}`}>\n            {!edges.length && (\n            <div className=\"no-posts-placeholder\">\n              Great posts will be here as soon as my muse comes back to me ðŸ’« <br />\n              Come back soon ðŸ‘‹\n            </div> )}\n            {edges.map(blogpost => (\n              <BlogTeaser\n                key={blogpost.node.id}\n                title={blogpost.node.frontmatter.title}\n                url={blogpost.node.frontmatter.path}\n                timeToRead={blogpost.node.timeToRead}\n                publishedHumanDate={blogpost.node.frontmatter.humanDate}\n                publishedFullDate={blogpost.node.frontmatter.fullDate}\n                excerpt={blogpost.node.excerpt}\n                cover={blogpost.node.frontmatter.cover}\n              />\n            ))}\n          </main>\n          <div className=\"clearfix\" />\n        </div>\n        <Footer />\n      </Layout>\n    )\n  }\n}\n\nexport default BlogListPage\n\nexport const pageQuery = graphql`\n  query TechListQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }, \n      filter: {fileAbsolutePath: {regex: \"/(blog)/\"  }}\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 100)\n          timeToRead\n          frontmatter {\n            humanDate: date(formatString: \"MMM D, YYYY\")\n            fullDate: date (formatString: \"YYYY-MM-DD\") \n            path\n            title\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 620) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}