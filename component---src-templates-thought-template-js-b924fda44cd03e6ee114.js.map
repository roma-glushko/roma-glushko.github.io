{"version":3,"sources":["webpack:///./src/components/thoughts/thought-author.js","webpack:///./src/components/thoughts/thought.js","webpack:///./src/components/thoughts/thought-navigation.js","webpack:///./src/templates/thoughtTemplate.js"],"names":["ThoughtAuthor","className","Thought","props","title","timeToRead","publishedHumanDate","publishedFullDate","contentHtml","cover","fluid","childImageSharp","space","dateTime","dangerouslySetInnerHTML","__html","ThoughtNavigation","next","frontmatter","nextTitle","nextUrl","path","prev","prevTitle","prevUrl","rel","to","Template","data","pageContext","prevThought","nextThought","markdownRemark","humanDate","fullDate","keywords","html","rawMarkdownBody","excerpt","words","wordCount","pagePath","imagePath","src","ogType","description","meta","tags","datePublished","content","pageQuery"],"mappings":"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","file":"component---src-templates-thought-template-js-b924fda44cd03e6ee114.js","sourcesContent":["import React from \"react\";\nimport Logo from \"../theme/logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = () => {\n  return (\n    <div className=\"thought-author-wrapper\">\n      <div className=\"logo\">\n        <div className=\"avatar\">\n          <Logo />\n        </div>\n      </div>\n      <div className=\"name\">• Roman Glushko •</div>\n      <p className=\"thought-section-descr\">My thoughts, pieces of advice and life experience <br />that will help you to <strong>overcome</strong> your life struggles</p>\n    </div>\n  );\n};\n\nexport default ThoughtAuthor;","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Img from \"gatsby-image\"\n\nimport MainNavigation from \"../theme/main-navigation\"\nimport ThemeSwitcher from \"../theme/theme-switcher\"\n\nimport \"./thought.css\"\nimport \"../theme/content.css\"\n\nconst Thought = (props) => {\n\n    const {\n        title,\n        timeToRead,\n        publishedHumanDate,\n        publishedFullDate,\n        contentHtml,\n        cover,\n    } = props;\n\n    return (\n        <article className=\"thought-wrapper\">\n            <header>\n                <div className=\"cover-filter\">\n                    <Img className=\"cover\" fluid={cover.childImageSharp.fluid} />\n                </div>\n                <MainNavigation space={\"thoughts\"} />\n                <h1>{title}</h1>\n                <div className=\"thought-details\">\n                    <time className=\"thought-createdat\" dateTime={publishedFullDate}>{publishedHumanDate}</time>\n                    <span> • </span>\n                    <span className=\"thought-time2read\">{timeToRead} min read</span>\n                    <div className=\"theme-switcher\">\n                        <ThemeSwitcher />\n                    </div>\n                </div>\n            </header>\n            <div className=\"thought-divider\" />\n            <div\n                className=\"content thought-content\"\n                dangerouslySetInnerHTML={{ __html: contentHtml }}\n            />\n        </article>\n    );\n};\n\nThought.propTypes = {\n    title: PropTypes.string.isRequired,\n    timeToRead: PropTypes.number.isRequired,\n    publishedHumanDate: PropTypes.string.isRequired,\n    publishedFullDate: PropTypes.string.isRequired,\n    contentHtml: PropTypes.string.isRequired,\n};\n\nexport default Thought","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\";\n\nimport \"./thought-navigation.css\"\n\nconst ThoughtNavigation = props => {\n\n  const {\n    next: {\n      frontmatter: { title: nextTitle, path: nextUrl } = {}\n    } = {},\n    prev: {\n      frontmatter: { title: prevTitle, path: prevUrl } = {}\n    } = {}\n  } = props;\n\n  return (\n    <div className=\"thought-navigation-wrapper\">\n      <nav className=\"thought-navigation\">\n        <div className=\"nav-links\">\n          {nextUrl && (\n            <Link rel=\"next\" className=\"next-thought\" to={nextUrl}>\n              {nextTitle} →\n            </Link>\n          )}\n          {prevUrl && (\n            <Link rel=\"prev\" className=\"prev-thought\" to={prevUrl}>\n              ← {prevTitle}\n            </Link>\n          )}\n          <Link className=\"all-thoughts\" to=\"/thoughts\">All Thoughts</Link>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nThoughtNavigation.propTypes = {\n  next: PropTypes.object,\n  prev: PropTypes.object,\n};\n\nexport default ThoughtNavigation;","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport Thought from \"../components/thoughts/thought\"\nimport ThoughtNavigation from \"../components/thoughts/thought-navigation\"\nimport Layout from \"../components/theme/layout\"\nimport Footer from \"../components/theme/footer\"\nimport SEO from \"../components/seo\"\nimport ShareBlock from '../components/thoughts/share-block'\n\nimport \"./thought-view.css\"\nimport ThoughtRichSnippet from \"../components/thoughts/thought-rich-snippet\"\n\nexport default function Template({ data, pageContext: { prevThought, nextThought } }) {\n  const {\n    markdownRemark: {\n      frontmatter: {\n        path,\n        title,\n        humanDate,\n        fullDate,\n        keywords,\n        cover\n      },\n      html,\n      rawMarkdownBody,\n      timeToRead,\n      excerpt,\n      wordCount: { words }\n    }\n  } = data\n\n  return (\n    <Layout>\n      <SEO\n        title={title + \" - Thoughts\"}\n        className=\"thought-view-page\"\n        pagePath={path}\n        imagePath={cover.childImageSharp.fluid.src}\n        ogType=\"article\"\n        description={excerpt}\n        keywords={keywords}\n        meta={[]}\n      />\n      <div className=\"thoughts-title\">\n        <Link to=\"/thoughts/\">Thoughts</Link>\n      </div>\n      <main>\n        <Thought title={title} timeToRead={timeToRead} publishedHumanDate={humanDate} publishedFullDate={fullDate} cover={cover} contentHtml={html} />\n        <ShareBlock title={title} path={path} tags={keywords} />\n      </main>\n      <aside className=\"thought-sidebar\">\n        <ThoughtAuthor />\n        <ThoughtNavigation prev={prevThought} next={nextThought} />\n      </aside>\n      <Footer />\n      <ThoughtRichSnippet\n        title={title}\n        datePublished={fullDate}\n        content={rawMarkdownBody}\n        wordCount={words}\n        keywords={keywords}\n        cover={cover}\n      />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      timeToRead\n      excerpt\n      rawMarkdownBody\n      wordCount {\n        words\n      }\n      frontmatter {\n        path\n        humanDate: date(formatString: \"MMM D, YYYY\")\n        fullDate: date (formatString: \"YYYY-MM-DD\") \n        title\n        keywords\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 3400) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}