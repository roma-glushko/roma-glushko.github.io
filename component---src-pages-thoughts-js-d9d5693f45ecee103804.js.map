{"version":3,"sources":["webpack:///./src/components/thoughts/thought-author.js","webpack:///./src/components/theme/logo.js","webpack:///./src/components/theme/footer.js","webpack:///./src/components/thoughts/thought-teaser.js","webpack:///./src/pages/thoughts.js"],"names":["ThoughtAuthor","className","Logo","data","fluid","placeholderImage","childImageSharp","Footer","iconSize","Date","getFullYear","ThoughtTeaser","props","title","url","timeToRead","publishedHumanDate","publishedFullDate","excerpt","cover","to","dateTime","class","ThoughtListPage","render","edges","this","allMarkdownRemark","pagePath","description","keywords","space","map","thought","key","node","id","frontmatter","path","humanDate","fullDate","Component","pageQuery"],"mappings":"8FAAA,+CAmBeA,IAdO,WACpB,OACE,yBAAKC,UAAU,0BACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,UACb,kBAAC,IAAD,QAGJ,yBAAKA,UAAU,QAAf,qBACA,uBAAGA,UAAU,yBAAb,qDAAuF,6BAAvF,yBAAmH,4CAAnH,2B,wmDCiBSC,IAhBF,WACX,IAAMC,EAAI,OAYV,OAAO,kBAAC,IAAD,CAAKF,UAAU,WAAWG,MAAOD,EAAKE,iBAAiBC,gBAAgBF,U,gFC3BhF,+CAyBeG,IApBA,WAQb,OACE,gCACE,yBAAKN,UAAU,kBACb,kBAAC,IAAD,CAAaO,SAAS,OACtB,yBAAKP,UAAU,aAAf,2BAC0B,IAAIQ,MAAOC,mB,uPC0B9BC,G,UAtCO,SAACC,GAAW,IAG1BC,EAOAD,EAPAC,MACAC,EAMAF,EANAE,IACAC,EAKAH,EALAG,WACAC,EAIAJ,EAJAI,mBACAC,EAGAL,EAHAK,kBACAC,EAEAN,EAFAM,QACAC,EACAP,EADAO,MAGJ,OACI,6BAASlB,UAAU,gBACf,4BAAI,kBAAC,OAAD,CAAMmB,GAAIN,GAAMD,IACpB,yBAAKZ,UAAU,mBACX,0BAAMA,UAAU,oBAAoBoB,SAAUJ,GAAoBD,GAClE,qCACA,0BAAMf,UAAU,qBAAqBc,EAArC,cAEJ,kBAAC,OAAD,CAAMK,GAAIN,GACN,yBAAKQ,MAAM,gBACP,kBAAC,IAAD,CAAKrB,UAAU,QAAQG,MAAOe,EAAMb,gBAAgBF,UAG5D,uBAAGH,UAAU,kBAAkBiB,M,0BCpBrCK,E,gLACJC,OAAA,WAAU,IAC6BC,EAAcC,KAAKd,MAAhDT,KAAQwB,kBAAqBF,MAErC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEZ,MAAM,WACNe,SAAS,aACT3B,UAAU,qBACV4B,YAAY,oGACZC,SAAU,CACR,WACA,UACA,iBACA,aACA,yBACA,yBACA,OACA,SACA,gBAGJ,yBAAK7B,UAAU,oBACb,wBAAIA,UAAU,kBAAd,YACA,2BAAOA,UAAU,mBACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAgB8B,MAAO,aACvB,yBAAK9B,UAAU,kBACb,kBAAC,IAAD,QAGJ,0BAAMA,UAAU,iBACbwB,EAAMO,KAAI,SAAAC,GAAO,OAChB,kBAAC,EAAD,CACEC,IAAKD,EAAQE,KAAKC,GAClBvB,MAAOoB,EAAQE,KAAKE,YAAYxB,MAChCC,IAAKmB,EAAQE,KAAKE,YAAYC,KAC9BvB,WAAYkB,EAAQE,KAAKpB,WACzBC,mBAAoBiB,EAAQE,KAAKE,YAAYE,UAC7CtB,kBAAmBgB,EAAQE,KAAKE,YAAYG,SAC5CtB,QAASe,EAAQE,KAAKjB,QACtBC,MAAOc,EAAQE,KAAKE,YAAYlB,YAItC,yBAAKlB,UAAU,cAEjB,kBAAC,IAAD,Q,GAhDsBwC,aAwDjBC,GAFEnB,YAEO","file":"component---src-pages-thoughts-js-d9d5693f45ecee103804.js","sourcesContent":["import React from \"react\";\nimport Logo from \"../theme/logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = () => {\n  return (\n    <div className=\"thought-author-wrapper\">\n      <div className=\"logo\">\n        <div className=\"avatar\">\n          <Logo />\n        </div>\n      </div>\n      <div className=\"name\">• Roman Glushko •</div>\n      <p className=\"thought-section-descr\">My thoughts, pieces of advice and life experience <br />that will help you to <strong>overcome</strong> your life struggles</p>\n    </div>\n  );\n};\n\nexport default ThoughtAuthor;","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst Logo = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"homepage/photo.jpeg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 160) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img className=\"logo-img\" fluid={data.placeholderImage.childImageSharp.fluid} />\n}\n\nexport default Logo","\nimport React from \"react\"\nimport SocialLinks from \"../homepage/social-links\"\n\nimport \"./footer.css\"\n\nconst Footer = () => {\n  /**\n   * <div className=\"footer-separator\">\n          <span className=\"separator\"></span>\n          <span className=\"separator\"></span>\n          <span className=\"separator\"></span>\n        </div>\n   */\n  return (\n    <footer>\n      <div className=\"footer-wrapper\">\n        <SocialLinks iconSize=\"2x\" />\n        <div className=\"copyright\">\n          Roman Glushko © 1996 - {new Date().getFullYear()}\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport \"./thought-teaser.css\"\n\nconst ThoughtTeaser = (props) => {\n\n    const {\n        title,\n        url,\n        timeToRead,\n        publishedHumanDate,\n        publishedFullDate,\n        excerpt,\n        cover,\n    } = props;\n\n    return (\n        <article className=\"thought-item\">\n            <h2><Link to={url}>{title}</Link></h2>\n            <div className=\"thought-details\">\n                <time className=\"thought-createdat\" dateTime={publishedFullDate}>{publishedHumanDate}</time>\n                <span> • </span>\n                <span className=\"thought-time2read\">{timeToRead} min read</span>\n            </div>\n            <Link to={url}>\n                <div class=\"cover-filter\">\n                    <Img className=\"cover\" fluid={cover.childImageSharp.fluid} />\n                </div>\n            </Link>\n            <p className=\"thought-digest\">{excerpt}</p>\n        </article>\n    );\n};\n\nThoughtTeaser.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    timeToRead: PropTypes.number.isRequired,\n    publishedDate: PropTypes.string.isRequired,\n    excerpt: PropTypes.string.isRequired,\n}\n\nexport default ThoughtTeaser","import React, { Component } from 'react';\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/theme/layout\"\nimport SEO from \"../components/seo\"\nimport MainNavigation from \"../components/theme/main-navigation\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\nimport ThoughtTeaser from \"../components/thoughts/thought-teaser\"\nimport Footer from \"../components/theme/footer\"\n\nimport \"./thoughts.css\"\n\nclass ThoughtListPage extends Component {\n  render() {\n    const { data: { allMarkdownRemark: { edges } } } = this.props\n\n    return (\n      <Layout>\n        <SEO\n          title=\"Thoughts\"\n          pagePath=\"/thoughts/\"\n          className=\"thoughts-list-page\"\n          description=\"Thoughts and experience that will help you to go through this life this life in the very best way\"\n          keywords={[\n            'thoughts',\n            'opinion',\n            'life exploring',\n            'psychology',\n            'roman glushko thoughts',\n            'roman hlushko thoughts',\n            'life',\n            'people',\n            'management',\n          ]}\n        />\n        <div className=\"thoughts-wrapper\">\n          <h1 className=\"thoughts-title\">Thoughts</h1>\n          <aside className=\"thought-sidebar\">\n            <ThoughtAuthor />\n            <MainNavigation space={\"thoughts\"} />\n            <div className=\"theme-switcher\">\n              <ThemeSwitcher />\n            </div>\n          </aside>\n          <main className=\"thoughts-list\">\n            {edges.map(thought => (\n              <ThoughtTeaser\n                key={thought.node.id}\n                title={thought.node.frontmatter.title}\n                url={thought.node.frontmatter.path}\n                timeToRead={thought.node.timeToRead}\n                publishedHumanDate={thought.node.frontmatter.humanDate}\n                publishedFullDate={thought.node.frontmatter.fullDate}\n                excerpt={thought.node.excerpt}\n                cover={thought.node.frontmatter.cover}\n              />\n            ))}\n          </main>\n          <div className=\"clearfix\" />\n        </div>\n        <Footer />\n      </Layout>\n    )\n  }\n}\n\nexport default ThoughtListPage\n\nexport const pageQuery = graphql`\n  query ThoughtListQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }, \n      filter: {fileAbsolutePath: {regex: \"/(thoughts)/\"  }}\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 100)\n          timeToRead\n          frontmatter {\n            humanDate: date(formatString: \"MMM D, YYYY\")\n            fullDate: date (formatString: \"YYYY-MM-DD\") \n            path\n            title\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 400) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}